// Code generated by go-bindata DO NOT EDIT.
// sources:
// completion.sh
package completion

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _completionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdd\x6f\xdb\x38\x12\x7f\x3e\xfd\x15\xb3\xb2\x81\xc6\x49\xb4\x69\x5f\x93\xba\xe8\x5e\x3f\x0e\x05\x76\xb7\xc5\xed\xed\xc3\x21\x08\x04\x8a\x1a\x59\xbc\xd0\xa4\x40\x52\x76\x7c\x41\xfe\xf7\xc3\x90\xfa\xb4\xe5\x6c\x8b\x4d\x7b\x0f\x5b\x03\x45\x1d\x7e\xcc\x0c\x67\x7e\xf3\x1b\x7a\x38\xfb\xe1\x22\x13\xea\x22\x63\xb6\x8c\xa2\x19\xa4\x69\xce\xb5\x4d\x5f\x96\x28\x2b\x34\x50\xd4\x8a\xbf\xa2\xe1\x30\xca\xa5\x00\x5b\x67\x5c\xaf\xd7\x4c\xe5\xaf\xa2\xa8\x59\x9e\x63\x56\xaf\x4e\x16\x70\x1f\x01\x00\x88\x02\xae\xaf\x21\x51\x30\xbf\x7f\xfb\xe6\xe3\x6f\xe9\x9b\x8f\xbf\x7c\x4a\xdf\xbe\xfb\xfb\xef\xff\x48\xdf\x7f\xf8\xf9\xdd\x03\xdc\xdc\x5c\x81\x2b\x51\xf9\xd5\xf4\x41\x5e\x6a\x88\xe7\xf7\xef\x7f\xff\xf5\xcd\xaf\x3f\xfd\xf2\xee\xfa\xc5\xcd\xc3\x25\xcc\x4f\x63\x78\xf5\x8a\xc6\x27\xc5\xc4\x7e\x7b\x21\xa2\x07\x88\xc8\xf4\xb7\x58\xb0\x5a\x3a\xc8\xb0\x64\x1b\xa1\x0d\x38\x0d\x2b\x74\xa4\x09\x14\xde\x39\x68\xcc\x86\xc2\xe8\xb5\x1f\xe5\xb5\x31\xa8\xba\x89\x1f\xe1\x83\x0a\xe3\xcc\x22\xe8\x02\x92\x84\xdc\x00\xb4\x67\xcd\x76\x19\x82\x76\x25\x1a\xb0\xc2\xd5\xcc\x09\xad\x6c\x34\x03\x11\xb6\x14\xb5\xab\x0d\x82\x2b\x99\x03\x5b\xea\x5a\xe6\x80\x2a\x27\xc9\x95\x44\x5a\x7b\x0e\xae\x14\x16\x0c\xba\xda\x28\x0b\x2f\xce\x83\xb0\xad\xb0\x08\xcf\xa3\x59\x34\x83\x9f\xac\xad\xd7\x68\x81\xc1\xbc\xb5\x74\xc3\x8c\x60\x99\x44\xc0\x3b\x61\x9d\x6d\x95\x71\x26\xa5\x50\x2b\xe0\x5a\x39\x3a\x98\xd7\xba\x15\x52\xfa\x11\xd6\x9a\xa4\x6b\x95\x0f\xc2\xb5\xa7\xe2\x8b\x84\x0b\x3b\x74\x58\x34\x83\xad\x36\x39\x64\x48\x0b\x71\xc3\x64\xcd\x1c\x0e\x1c\x2b\x54\x55\x3b\xb0\xce\xd0\xfc\x89\x3f\xb8\xb0\x90\x63\x21\x14\xe6\xa4\xa8\xc1\xcd\x9a\x6c\xb5\xba\xf1\x98\x7a\x46\xc1\x03\x06\x95\xd1\x99\xc4\xf5\xa2\x87\x97\x8f\x6c\xda\x1c\x24\xad\x98\xb1\xd8\xc1\x6d\x5b\x0a\x89\x70\x0d\xf1\x9c\xc7\x90\x48\x47\x5f\xc8\xbc\x18\x6e\xae\x20\xd7\x1d\xc8\xc4\x32\x9e\xdf\xd3\x84\xbd\xe6\x37\x0d\x7a\xe8\xe3\xa3\x1d\xcf\x45\x0c\xa2\x47\x24\x7d\x42\xf8\x17\xa3\x31\xfa\xcc\x08\xe1\x1e\x19\xc2\x42\x65\xd0\x12\x86\x18\x79\xb5\x90\x6c\x75\x0e\x5c\x67\x86\x85\x78\x88\x95\xd2\x06\x01\x37\x68\x76\xae\x24\x6f\xb0\xc2\x11\x84\x34\x58\xa7\xab\x01\x3e\x0e\xb4\x04\xa4\xc0\x8b\x83\x89\xab\xab\xb1\x95\xa7\x8b\xfd\xa1\xd3\x43\x9b\x1b\xd7\x2d\xe9\x9c\x57\x13\x27\x9a\x73\x3a\x0c\x16\x05\x72\x27\x36\x28\x77\xb0\x92\x3a\x63\x92\x2c\x0d\xf0\x62\x3b\x10\x0e\x38\x53\xc0\x0d\xdb\x4a\x70\xa5\xd1\xf5\xaa\xf4\xf1\x66\x66\x55\xaf\x51\x39\x4b\x6e\xa0\x81\xca\xe8\x95\x61\xeb\x09\x45\x8a\x6d\xc4\x8a\x39\xb4\x4d\xda\x28\x4e\xa7\x07\x67\x10\x7d\xa2\x59\x4d\xb6\x78\xe7\x31\xb9\x65\x3b\x4b\x90\xe8\x52\xb8\x56\x06\x59\xee\xd1\x37\x21\x3b\xf8\xb6\x10\x2a\x27\x4f\xef\xe7\xfd\x39\x6c\x09\x99\xdc\x20\x99\x4a\x5a\x32\x2c\x28\x3a\x99\x41\x76\x4b\x3b\x74\xed\x28\xed\x69\xa3\xd4\xba\x3a\xd0\x70\x72\xc2\xcf\xce\x16\x87\xce\xf5\x02\x1e\x8b\x13\x5a\xc6\xa3\x29\x29\xb9\x56\xe8\xbf\x34\xd1\x7e\x1e\x3d\x74\xa4\x5a\x32\x95\x4b\x24\xd0\x57\x06\x2b\xb9\xeb\x00\x3f\x24\x5d\x88\x7b\x08\x59\x4f\x99\x91\x5f\x23\x35\x67\x12\xc4\xf2\x79\xf8\xb3\xd0\x66\x80\x35\xca\xc0\x78\xfe\x3a\x1e\xa5\xc7\x0c\x0a\x21\xc9\x7f\xe4\x85\x81\x50\xca\x2f\x5e\x92\xa5\xcf\x1c\xac\x99\xe3\xe5\x88\x3b\x47\xa1\x08\xcc\x3f\x1f\x68\x5a\x2e\x29\x1d\x6b\x13\x9f\x1e\xb2\x7e\xd0\xca\x4b\xe4\xb7\xb4\xd3\x4b\xed\x77\xea\xa2\x40\x43\x6c\xd1\x26\x56\xc0\x21\xe3\x1c\x2b\x02\x9a\xea\x50\xd7\x58\x28\x2c\xac\x99\xb9\xc5\x1c\xb2\x1d\x4d\x2f\xf7\x14\x89\x02\xac\x3e\x07\x06\xb6\x62\x1c\x69\xb9\xd2\x74\x22\x55\x33\x29\x77\xc0\xf2\x1c\x73\xb0\x42\xf1\x80\xb7\xda\xa2\xf1\x39\x71\x57\x21\x27\x76\x73\x9a\xd6\x40\x51\x1b\x5f\x05\x3c\xc7\x8d\x54\x34\x44\xd2\x9f\xe1\x80\x51\xc0\xb3\xca\xe9\x72\x22\x41\xe9\x43\x15\xee\x9f\xef\x3e\xfd\xfc\xef\x6b\x71\x76\x76\xb3\x1c\x89\x9a\xdc\x70\x75\x98\xca\x5f\x2e\x1a\x3e\x4b\xf6\x08\xc2\x85\xe8\xd1\xfb\x40\xb5\xf7\x0d\x93\xd2\x86\x6c\xeb\x0b\x0e\xc5\x41\xd7\x66\x58\x51\x36\xa8\x3c\xa8\x7e\x8c\x66\xf0\xaf\x8f\x6f\x3f\x5e\xf6\x41\xf4\x70\xf7\xcb\x98\xf2\x15\x80\x65\x72\x47\xc9\x4f\x5a\x60\xed\x69\xf4\xae\x92\x82\x0b\x27\x77\xb4\x9d\xaa\x0a\x6b\x0a\x5a\xa8\x77\x52\xea\x2d\x49\x68\x2b\x9b\x0d\xa5\x6d\xbf\xb2\x59\xae\xab\x40\x36\xcc\x10\xe4\x8c\x41\xee\x2e\xa3\x59\x4b\x14\x96\xac\x32\x6c\x47\x5c\xd0\x9f\xc6\x86\x02\xde\x31\x56\xa9\x65\x6e\xfb\x4d\x97\x2d\x7e\xfd\xc9\x9d\xf6\xda\x40\x28\xa7\xf7\xf2\xb9\x97\xe8\x13\x3a\xea\xc0\xc9\xba\xdd\x5b\x66\x61\x25\x36\xa8\xce\x9b\xec\x08\x35\xd8\x97\x61\xc2\x3d\x77\x35\x93\xdd\x6a\xfa\xe7\x95\x79\x26\xb6\x56\x73\x11\xaa\x71\x63\x69\x4f\x00\xeb\x3c\x64\xfe\x7d\x7b\xa4\xeb\xd7\x37\x0f\x63\x16\x68\x33\x78\x9d\x37\xa9\x1b\x56\xc6\xd3\xd9\x3b\x66\xa2\xfd\x0b\xc7\xa5\x97\xd3\x10\x52\xfb\x09\xc4\x34\x00\x09\x81\xa6\xad\xec\x7b\x19\x6b\xb7\xac\x82\x84\x6c\xee\x62\xa0\x18\x85\x9b\x4e\x93\x8e\x16\xf7\x02\x97\xdd\xf1\x2e\x2e\x92\x8b\xf4\x21\x7a\xc4\xe2\x16\x11\x14\xa6\x3e\xb2\xf3\x7b\xc9\x6c\x67\xd3\x43\x3a\xbf\xef\xa5\x3f\x8c\x93\x65\x68\xfc\xf2\xd1\x7d\x63\x27\x0c\xd6\x2d\xe7\x23\x0f\x8c\xd6\xcd\x8f\x3a\x27\xd4\x8b\x63\x09\x19\x0e\xc9\x6a\x57\x7a\x8c\xfd\xad\xa9\x06\x30\x52\x22\x0a\xf8\x01\x1e\xbb\x61\xed\x05\x7c\xa0\xb2\x10\xc3\x2a\xd3\x06\x67\x79\x12\x4b\x61\x5d\x52\x19\xbd\x11\x39\x1a\x1b\x43\x2c\xf5\x4a\xa8\xf0\xbf\xae\x5d\xbc\x18\x6c\x23\x4e\xa7\x3d\xe1\x9a\x15\x2f\x3a\xab\xae\x21\xf9\xef\x08\x7a\x7b\x86\xb4\x3c\x5b\x9b\x89\x2b\xdb\x04\xff\x1d\xa9\xa7\x94\x08\xde\x06\x9f\x05\x7f\x74\xcd\xfa\x32\xb9\xa3\x04\xfb\xec\x9b\xc1\x84\x87\x8f\x71\xc7\x38\xca\xa9\x77\xf3\xb7\x88\x75\x13\x34\x68\xa3\xe6\xa7\xe2\x24\xa9\x98\xb5\x74\x15\x58\x1e\x8c\x24\x85\x90\x38\x18\x36\x62\xc3\x1c\x26\xb7\xb8\x1b\x0e\x06\xc4\xf4\x23\x54\x7d\x29\xd7\x9b\x91\xa7\x02\xc7\x54\xe5\x9d\x35\x77\x1b\x5b\x57\x95\x36\x2e\xdc\x35\xba\xb2\x34\xa8\x93\x3b\x74\x47\x6e\xe9\x7f\x78\x47\xff\x8a\xb0\xfc\x5c\x34\xed\x01\x46\x58\x97\x76\x89\xfa\x0d\x91\xd3\x02\x87\x82\xfc\x1f\xab\xd5\x93\xe5\xfd\x5f\x37\xb4\x07\x54\xa0\x6b\xf7\x7f\x88\xe8\xf7\x40\x3e\x59\x20\xb9\xac\xad\x43\xd3\xfd\xe2\x7b\xc2\x38\xc2\xe3\x05\x9c\x39\xc7\x78\x19\x43\xdc\x24\x29\xf1\x44\x0c\xb1\xc1\xb5\xde\xa0\xff\x42\xac\x1c\x43\x6c\xd1\xd5\xd5\xf7\x7a\xbe\x2f\xfa\xcf\xd7\xf3\x26\xf6\x69\x88\xc4\xd7\x80\xc0\xf7\x54\xfe\xf6\xa9\x9c\x92\x5f\xbb\x60\x5e\x1e\xce\x53\xa2\x3d\x36\x1f\x32\xf0\xf1\x15\x94\x9a\x8f\xad\xf0\x39\x3b\xb9\x40\xab\x42\xac\xa6\x66\x8e\x99\x5d\xc9\xba\xbd\x71\x76\x33\x61\x6a\xaf\xf2\x2c\x5f\x7c\xfd\x5f\x1d\x54\xf7\x62\x88\x9b\x63\xd2\x37\x7f\x9e\x9e\xc5\x82\xb5\x8f\xb1\x15\x5d\x47\x36\x68\xac\xe8\x6f\x24\x61\x5d\xd8\x9a\x76\x3f\x40\x7b\x80\xa6\xb9\x30\x36\x2c\xf5\x4d\xc9\xc4\x40\xc2\x0e\xd6\xbf\x7c\xf9\x12\xe2\xf9\x09\x9d\xb7\x99\x03\x0a\x35\x24\x49\xbb\x64\x11\x50\xd7\xfe\x79\xb6\x3c\x89\xe7\xf7\x7b\x62\x3c\x38\x17\x43\x06\x69\x7e\xc1\xbe\xf7\xbf\xb9\x1b\xc1\xed\xea\x18\x8e\x48\x88\x5a\x4d\xc3\x23\x2c\x8f\x59\xd7\x2c\x4a\x68\xd1\x94\xee\x4f\x9d\xd6\x36\x65\x73\x61\x90\x3b\x6d\x04\x06\x1b\xf6\x34\x35\x36\x44\x81\x06\x94\x1e\xb6\x01\xda\x7e\x47\xd8\x81\x80\xc2\x77\xd9\x7c\x98\x40\x9b\x61\x23\xe6\x4f\x72\xd3\x04\x2f\xb5\xcd\xa8\x09\x66\x1a\x9c\xce\x88\x55\xe9\x40\xe9\xed\xde\x5e\xdf\x17\xca\x35\x5a\x90\xc8\x36\xe8\x1b\xa8\xbe\x09\xae\x1d\x2a\x27\x08\x6c\xda\x40\x8e\x0e\xb9\x13\x6a\xd5\x9c\xc9\xf7\x74\x1c\xbb\x45\xd8\x30\x59\xa3\x85\xac\x76\xbe\x21\x65\xb1\x62\xc6\x77\x70\xa4\xb8\xc5\x3d\x5d\x49\xe2\xad\xf2\x5b\x40\x28\xeb\x08\x79\xfe\xa9\x8a\xc6\x97\x7e\x7c\x6f\xcb\x16\x9f\x19\xf4\xbd\xce\xad\x36\x66\xe7\x1f\x21\x32\xb2\xb1\x65\xde\x3d\xd2\x05\x57\xfa\xc6\xbe\xd5\x20\xdc\x33\x0b\x96\x15\x08\x4e\xb7\x6f\x19\x64\xf7\x48\xc3\x04\x27\x0f\x38\xf2\x80\x8b\xbf\x9c\x87\x07\xd2\x0e\xe2\xa6\xf4\x61\xd7\x8c\x2c\xf7\x28\xa6\x43\x56\xda\x5a\x91\x49\x3c\x00\xd0\x67\xd8\x73\xbc\xea\x3f\x55\xc5\xef\x9f\xc1\x8e\x74\xf7\xe7\xaf\x47\x0d\x7d\x5e\x1b\xa8\x0c\x6e\x7c\xdb\xdd\x82\x7f\xe7\x1a\x75\x93\x9a\xdc\x22\x3f\x8c\xc6\x3d\x20\x8d\xd6\x8e\xb6\x17\xe2\x2e\xc8\x1c\xb6\xa1\x62\xaf\xb7\xd1\xd6\xb5\x8b\x97\x27\x8b\x36\x5f\xc7\xed\xcf\xf1\xa3\x61\xc6\x6c\x39\xa0\x0c\xa8\x18\xbf\x65\x2b\x6c\x3a\xf3\x1f\x20\x43\x29\x70\x83\xb0\xae\xad\x6b\xc4\x65\x01\xbf\x4c\x4a\xcc\x3b\xcc\xcb\x5d\x78\x44\xf4\xcf\xd1\xde\x1b\x2b\xf4\x26\x56\xa9\x3f\x71\x9a\xed\x52\x83\x05\x24\x0a\xe2\xe5\x65\x3c\xe9\x8f\x68\xc2\x8d\xbf\x39\x66\x5c\xe8\x41\xf7\x0f\x0c\x0a\x88\x1b\x82\xc2\xf6\x65\xf0\xb4\x63\x49\xbf\x9f\x82\xd4\x51\x52\xa2\xbd\x5d\x4d\xd5\xa2\x3f\x07\x5f\x95\x0e\xcf\x0a\xc9\xfb\xd1\xe3\xa6\x17\xf2\xbf\x00\x00\x00\xff\xff\x3e\x75\xe2\x26\x64\x1f\x00\x00")

func completionShBytes() ([]byte, error) {
	return bindataRead(
		_completionSh,
		"completion.sh",
	)
}

func completionSh() (*asset, error) {
	bytes, err := completionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "completion.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"completion.sh": completionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"completion.sh": &bintree{completionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

