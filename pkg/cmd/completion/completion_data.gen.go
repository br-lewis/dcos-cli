// Code generated by go-bindata DO NOT EDIT.
// sources:
// completion.sh
package completion

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _completionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x6d\x6f\x1c\xb7\xf1\x7f\x7f\x9f\x62\xb2\x77\x80\x25\x59\x1b\x49\xff\x7f\xdf\x54\xf2\x19\x49\xfd\x50\x04\x48\xe2\xa0\x69\x5e\x14\x82\x70\xe0\xed\xce\xde\xb2\xe2\x91\x0b\x3e\xdc\xf9\xaa\xea\xbb\x17\x43\x72\x9f\x6e\x57\x8a\xdd\xca\x96\xdd\x6a\x81\xc0\x3a\x2e\x39\x1c\xce\xfc\xe6\x37\xe4\x66\x38\xfd\xe6\x64\xc9\xe5\xc9\x92\x99\x72\x32\x99\xc2\x62\x91\x67\xca\x2c\x5e\x94\x28\x2a\xd4\x50\x38\x99\xbd\xa4\xe6\xd0\x9a\x09\x0e\xc6\x2d\x33\xb5\x5e\x33\x99\xbf\x9c\x4c\x62\xf7\x1c\x97\x6e\x75\x70\x08\x37\x13\x00\x00\x5e\xc0\xe5\x25\xa4\x12\x66\x37\xaf\x5f\xbd\xfb\x75\xf1\xea\xdd\x4f\xbf\x2c\x5e\xbf\xf9\xd3\x6f\x7f\x5e\xbc\xfd\xe1\xc7\x37\xb7\x70\x75\x75\x01\xb6\x44\xe9\x7b\xd3\x83\x59\xa9\x20\x99\xdd\xbc\xfd\xed\xe7\x57\x3f\x7f\xff\xd3\x9b\xcb\xb3\xab\xdb\x73\x98\x1d\x25\xf0\xf2\x25\xb5\x8f\x8a\x49\xfc\xf0\x82\x4f\x6e\x27\xa4\xf9\x6b\x2c\x98\x13\x16\x96\x58\xb2\x0d\x57\x1a\xac\x82\x15\x5a\x9a\x08\x24\xbe\xb7\x10\xb5\x86\x42\xab\xb5\x6f\xcd\x9c\xd6\x28\x9b\x17\xdf\xc2\x0f\x32\xb4\x33\x83\xa0\x0a\x48\x53\xb2\x02\xd0\x98\x35\xdb\x2d\x11\x94\x2d\x51\x83\xe1\xd6\x31\xcb\x95\x34\x93\x29\xf0\x30\xa4\x70\xd6\x69\x04\x5b\x32\x0b\xa6\x54\x4e\xe4\x80\x32\x27\xc9\x95\x40\xea\x7b\x0c\xb6\xe4\x06\x34\x5a\xa7\xa5\x81\xb3\xe3\x20\x6c\xcb\x0d\xc2\xe9\x64\x3a\x99\xc2\xf7\xc6\xb8\x35\x1a\x60\x30\xab\x35\xdd\x30\xcd\xd9\x52\x20\xe0\x7b\x6e\xac\xa9\x27\xcb\x98\x10\x5c\xae\x20\x53\xd2\xd2\xc2\xfc\xac\x5b\x2e\x84\x6f\x61\xb5\x4a\xca\xc9\xbc\xe3\xad\xbd\x29\x3e\x4a\x38\x37\x5d\x83\x4d\xa6\xb0\x55\x3a\x87\x25\x52\x47\xdc\x30\xe1\x98\xc5\x8e\x61\xb9\xac\x9c\x05\x63\x35\xbd\x3f\xf0\x0b\xe7\x06\x72\x2c\xb8\xc4\x9c\x26\x8a\xb0\x59\x93\xae\x46\x45\x8b\xc9\x67\xe4\x3c\x60\x50\x69\xb5\x14\xb8\x3e\x6c\xd1\xe5\x3d\xbb\x88\x0b\x59\x54\x4c\x1b\x6c\xd0\xb6\x2d\xb9\x40\xb8\x84\x64\x96\x25\x90\x0a\x4b\x7f\x90\x7a\x09\x5c\x5d\x40\xae\x1a\x8c\xf1\x79\x32\xbb\xa1\x17\xe6\x32\xbb\x8a\xe0\xa1\xc7\x7b\x3b\x99\xf1\x04\x78\x0b\x48\x7a\x82\xfb\xff\x99\x96\x87\xbd\x66\x7a\xa6\x84\x71\x0f\x0e\x4e\xd6\x2c\x04\x5b\x1d\x43\xa6\x96\x9a\x81\xb1\xaa\x32\x40\x2a\xd2\xe2\xf9\x7a\x8d\x39\x67\x16\xc5\x8e\x16\xba\xc5\x88\x00\x28\x51\xe3\x40\x6c\x7c\x77\x36\x78\x71\x71\xd1\xd7\xec\xe8\x70\xbf\xe9\x68\xa8\x64\x34\xd7\x9c\xd6\x76\x31\xb2\x84\x59\x46\xda\x63\x51\x60\x66\xf9\x86\x34\x5c\x09\xb5\x64\x82\x14\x0d\x90\x62\x3b\xe0\x16\x32\x26\x21\xd3\x6c\x2b\xc0\x96\x5a\xb9\x55\xe9\x7d\xcc\xf4\xca\xad\x51\x5a\x03\x2c\x80\xa3\xd2\x6a\xa5\xd9\x7a\x64\x22\xc9\x36\x7c\xc5\x2c\x9a\x18\x2a\x32\xa3\x88\x00\xab\x11\x7d\x70\x19\x45\xba\x78\x00\x33\xb1\x65\x3b\x43\x30\x68\xc2\xd6\x49\x8d\x2c\xf7\x88\x1b\x91\xcd\x0a\x4b\x34\xc5\x65\x4e\xe6\xde\x8f\xf5\x63\xb2\x38\x97\x99\x46\x52\x95\x66\x59\x62\xa1\x34\xc2\x52\x23\xbb\xa6\x11\xca\x59\x0a\x75\x1a\x28\x94\xaa\x06\x33\x1c\x1c\x64\xcf\x9f\x1f\x0e\x8d\xeb\x05\xdc\xe7\x27\x34\x2c\x9b\x8c\x49\xc9\x95\x0c\x9e\x8f\xde\x3e\x25\xfe\x8a\x48\x2f\x99\xcc\x05\x12\xd0\x2b\x8d\x95\xd8\x35\x20\xef\xf2\x2c\x24\x2d\xad\x18\xcf\x92\x13\xdf\x47\xa8\x8c\x09\xe0\xf3\xd3\xf0\xb3\x50\xba\xc3\x3f\x14\x75\xc9\xec\xbb\xa4\x17\x12\x53\x28\xb8\x20\xfb\x91\x15\x3a\x42\x29\xa6\xb2\x92\x34\x7d\x66\x61\xcd\x6c\x56\xf6\xf8\xb2\xe7\x8a\x40\xf6\xb3\xce\x4c\xf3\x39\x85\xa0\xd3\xc9\xd1\x90\xe8\xc3\xac\x59\x89\xd9\x35\x8d\xf4\x52\xdb\x91\xaa\x28\x50\x13\x43\xd4\x41\x15\x70\xc8\xb2\x0c\x2b\x02\x9a\x6c\x50\x17\x35\xe4\x06\xd6\x4c\x5f\x63\x0e\xcb\x1d\xbd\x9e\xef\x4d\xc4\x0b\x30\xea\x18\x18\x98\x8a\x65\x48\xdd\xa5\xa2\x15\x49\xc7\x84\xd8\x01\xcb\x73\xcc\xc1\x70\x99\x05\xbc\x39\x83\xda\xc7\xc4\xfb\x0a\x33\x62\x34\xab\xa8\x0f\x14\x4e\x7b\xe6\xf7\xbc\xd6\x9b\x22\x92\x47\xbb\x86\x01\x8b\x80\x67\x92\xa3\xf9\x48\x80\xd2\x43\x49\xed\x2f\x6f\x7e\xf9\xf1\x6f\x97\xfc\xf9\xf3\xab\x79\x4f\xd4\xe8\x80\x8b\x61\x28\x7f\xbc\x68\xf8\x20\xd9\x3d\x08\x17\xbc\x45\xef\x2d\xe5\xdb\x57\x4c\x08\x13\xa2\xad\x4d\x32\xe4\x07\xe5\x74\x37\x8b\x6c\x50\x7a\x50\x7d\x3b\x99\xc2\x5f\xdf\xbd\x7e\x77\xde\x3a\xd1\xc3\xdd\x77\x63\xd2\xb3\x3e\x5b\x8a\x1d\x05\x3f\xcd\x02\x6b\x0a\x54\x7c\x5f\x09\x9e\x71\x2b\x76\x34\x9c\x32\x09\x8b\x49\x2c\xe4\x38\x21\xd4\x96\x24\xd4\xd9\xcc\x84\x74\xb6\x9f\xcd\x4c\xa6\xaa\x40\x36\x4c\x13\xe4\xb4\xc6\xcc\x9e\x4f\xa6\x35\x51\x18\xd2\x4a\xb3\x1d\x71\x41\xbb\x1a\x13\x92\x76\xc3\x58\xa5\x12\xb9\x69\x07\x9d\xd7\xf8\xf5\x2b\xb7\xca\xcf\x06\x5c\x5a\xb5\x17\xcf\xad\x44\x1f\xd0\x93\x06\x9c\xac\x19\xbd\x65\x06\x56\x7c\x83\xf2\x38\x46\x47\xc8\xbb\x3e\xf5\x12\xee\x33\xeb\x98\x68\x7a\xd3\x7f\x7e\x32\xcf\xc4\xc6\xa8\x8c\x87\x0c\x1c\x35\x6d\x09\x60\x9d\x87\xc8\xbf\xa9\x97\x74\xf9\xdd\xd5\x6d\x9f\x05\xea\x08\x5e\xe7\x31\x74\x43\xcf\x64\x3c\x7a\xfb\x4c\xb4\xbf\xc9\x38\xf7\x72\x22\x21\xd5\x4f\x20\xa6\x0e\x48\x08\x34\x75\x36\xdf\x8b\x58\xb3\x65\x15\xa4\xa4\x73\xe3\x03\xc9\xc8\xdd\xb4\x9a\x45\xaf\x73\x2b\x70\xde\x2c\xef\xe4\x24\x3d\x59\xdc\x4e\xee\xd1\xb8\x46\x04\xb9\xa9\xf5\xec\xec\x46\x30\xd3\xe8\x74\xbb\x98\xdd\xb4\xd2\x6f\xfb\xc1\xd2\x55\x7e\x7e\xef\xb8\xbe\x11\x3a\xfd\xe6\xb3\x9e\x05\x7a\xfd\x78\x01\x39\x66\x82\x60\x9a\x16\x90\xf4\x7a\x26\xf0\x12\x4e\x72\xdc\x9c\x48\x27\xc4\x88\x6f\xe8\x99\xdd\x69\x5c\x14\x66\xb8\xe5\xe8\x1b\x67\x76\xd3\x1d\x7d\x0b\xb9\xc2\x40\x99\x3e\xa8\xfa\x76\x88\x84\x50\x3f\x21\x9b\xdd\x45\x17\x75\x40\x18\xe5\x74\x86\x8b\x4a\xb8\x15\x97\x8b\x4e\xca\x69\x32\x1d\xf9\x39\xe7\xfa\x8e\x7c\x65\xae\x79\x45\x26\x0a\x02\xbc\x7e\x94\xa3\x4a\xb6\xc1\x10\x4c\x35\xc1\xe5\x9c\x22\x5c\xe9\xdd\x1e\xcc\xd3\x1c\x66\x24\x7e\x14\xdb\x34\x77\x41\xbb\x49\x3f\xf9\x99\x3f\x14\x9d\x24\x47\x3d\x1d\xc6\x0d\xe7\xd7\x15\x08\xaf\xcd\xa2\x7e\x3f\x3c\x23\x81\x43\xba\x8d\x89\xc3\xbf\x1c\x4b\x19\xf4\x1c\x7d\x6b\x46\xf6\x9e\x1d\x63\x94\x28\x44\x60\x8b\x9c\x1b\x62\xbf\xf9\xaf\xaf\xce\x4e\xff\x78\x7a\xcf\x98\xd8\xd1\x74\x07\x6f\x99\x96\x61\xf7\x14\x28\x27\x63\x64\xd3\xc0\xad\x81\x01\x83\xdb\xee\x14\x1b\x5e\xd7\xcb\xb9\xb3\xdb\x48\xea\xf2\xcb\x1c\x6c\x66\x61\x3f\xf9\x40\x77\xdf\x04\x43\x78\x05\x5f\x30\x67\xcb\x06\x47\x71\x37\x04\xbd\x20\xe3\x05\x7c\x03\xf7\x9d\x2a\xf6\x40\xd1\x01\x75\xc1\xbb\xbb\xac\x9a\x9c\xe6\x07\x89\xe0\xc6\xa6\x95\x56\x1b\x9e\xa3\x36\x09\x24\x42\xad\xb8\x0c\xff\x2a\x67\x93\xc3\xce\x30\xda\xd3\xd0\x98\x70\xb4\x48\x0e\x1b\xad\x2e\x21\xfd\x47\x8f\x7a\xf7\x14\xa9\xf7\x19\x4e\x8f\x1c\x53\x46\xf2\xff\x1d\xfb\x49\x8a\x70\xaf\x83\xcf\x02\xbf\x77\xcc\xf8\x38\xb9\xbd\x04\xf3\xc1\x3b\xe3\x11\x0b\xdf\x95\x3b\xfb\x8e\x5e\x78\x33\x7f\x26\x77\x47\xbf\x41\xed\x38\xff\x2a\x49\xd3\x8a\x19\x43\xbb\xe1\xf9\xa0\x25\xa5\x50\xe8\x34\x6b\xbe\x61\x16\xd3\x6b\xdc\x75\x1b\x03\x68\xda\x16\xda\x80\x52\xba\x8b\x2d\x0f\x85\x8f\xb1\xcd\xe7\x34\x6e\xef\x8d\xab\x2a\xa5\x6d\xd8\x6e\x37\x3b\xb3\x0e\x93\xee\xd0\xde\x71\x50\xfd\xdd\x63\xea\x27\x44\xe6\x87\x02\x6a\x0f\x33\xdc\xd8\x45\x13\xab\x9f\x17\x3c\x35\x76\xc8\xcf\x7f\x37\x4a\x3e\x58\xf4\xff\xef\x7a\x77\x40\x08\xca\xd9\xc7\x71\xea\x93\x2f\x1f\xcc\x97\x99\x70\xc6\xa2\xfe\xfc\x89\x9c\x59\xcb\xb2\x32\x81\x24\x86\x29\x91\x45\x02\x89\xc6\xb5\xda\xa0\xff\x83\xa8\x39\x81\xc4\xa0\x75\xd5\x53\x5e\xdf\x17\xfd\x9f\xe7\xf5\xe8\xfa\x45\xf0\xc4\x53\x24\xf7\x9e\xaf\x36\x92\x7d\xd6\x7d\xbc\x5c\x1b\xc0\x84\xf9\x53\xe2\xfd\x84\x2e\x0e\x24\xf9\x88\x4e\x16\xc2\xff\xeb\x24\xdb\x30\x2e\xe8\x88\xfb\xe4\xe6\x4f\xe1\x66\x4a\x81\x5f\x37\x31\x7f\x71\x46\xf5\xdb\x89\xc7\xb1\xa9\x7f\x93\xa4\x69\xc6\xd2\x0c\xb5\x35\xed\x49\x94\x4b\x83\x99\xd3\xd8\x34\x74\x8e\xa5\xf4\x4b\xa5\xfe\xdb\x51\xb7\x21\x7c\x93\x7b\x3a\x1b\x7f\x7d\xd1\xad\x64\xc1\x57\x9f\x7f\xc3\x6d\x90\xf6\xd7\xa6\x54\xdb\x04\x12\x27\xe9\xe7\xd3\xa6\x1a\x1e\x7c\x53\xed\xbd\x4b\x2c\xf3\xc4\xdb\xa3\x7e\xfb\xf7\xc2\x65\x41\xb8\x7d\xb2\xe8\x43\x5a\xd4\x53\xc0\x93\x49\x1f\xc4\xa4\x21\x19\x3f\xc2\x47\x94\x3c\x1f\x7c\x3a\x79\x22\x75\x78\x68\x52\x8f\xff\x03\x95\xe5\xf9\xe3\x9d\xb9\x5c\x95\x33\xfb\x70\xc7\xac\x2f\x2c\x74\x1e\xf9\xab\xc5\x83\x7e\xa8\xf8\xd2\x4c\xfb\x98\x5f\x0b\xfe\xdb\x6c\x3a\xb4\xe2\xfc\xec\x33\xd0\xbc\xb3\x65\x02\x49\x3c\xc2\xd2\x5f\x3e\x85\xb7\x1f\xcf\xe3\x61\xf0\x1e\xea\x27\x94\x6f\x50\x1b\xde\x02\x3d\xf4\x6b\x8b\x43\x42\xfd\x4f\x7b\xde\x5a\xe4\x5c\x9b\xd0\xd5\xd7\x84\xa6\x1a\x52\x36\xe8\xff\xe2\xc5\x0b\x48\x66\x07\xb4\xde\xba\x4e\x84\x62\x19\xd2\xb4\xee\x72\x18\xdc\x50\xff\x7c\x3e\x3f\x48\x66\x37\x7b\x62\xbc\xb7\x0e\xbb\x74\x1c\x4b\x3d\xde\xfa\x92\xa7\x28\xb8\xee\x9d\xc0\x1d\x12\x06\xda\xee\xad\xe6\x7e\x6d\x63\xcf\x94\x7a\x46\xa5\xfb\xca\xfc\xd2\xa8\xb1\x5f\xf8\xc2\x31\x28\xb5\x37\x5f\x0b\xc2\xdf\xab\xc8\xb9\x73\xb0\x1f\x3d\x05\xa9\xba\x25\x5d\x75\xed\x5a\x18\x80\x80\xdc\x57\x4c\x7a\x9f\x83\xd2\xdd\xa2\xba\x87\x89\xbf\xf1\x73\x7b\x28\x30\x1c\x39\xbd\x77\x2c\xa4\xf9\xaa\xb4\x20\xd5\x76\x64\xbc\xaf\x76\xf1\x55\x4f\x02\xd9\x06\x7d\x61\xac\x2f\x6e\x56\x16\xa5\xe5\x84\x62\xa5\x21\x47\x8b\x99\xe5\x72\x15\xd7\xe7\x0b\x67\x2c\xbb\x46\xd8\x30\xe1\xd0\xc0\xd2\x59\x5f\x68\x68\xb0\x62\xda\x57\xe6\x09\x7e\x3d\xac\x9f\x99\x42\x9a\x7a\xed\xfc\x30\xe0\xd2\x58\x02\x8a\xbf\x7a\x40\xed\x73\xdf\x3e\x32\x6c\x8b\xcf\x34\xfa\xc2\xac\xad\xd2\x7a\x47\x9a\xb0\x25\xe9\x5a\x7f\xa9\xd8\xfb\x48\x01\xb6\xf4\x85\xdb\x46\x01\xb7\xcf\x0c\x18\x56\x20\x58\x05\x7c\x25\x55\xbc\xb6\x30\x98\xe5\xc3\xbe\x63\x50\x28\x0f\x1d\xf1\xf8\xdf\x40\x46\x8c\x26\xd5\xb0\xda\x92\x2c\xe2\xc3\x8d\x8c\x57\x29\x63\xf8\x52\xe0\x00\xac\x7d\x39\x5c\x52\x3c\x0b\x70\x86\xad\xf0\xb8\xbd\xad\x11\x0b\xd8\x8d\xf2\x57\x3f\x5c\x15\xef\x47\x74\x8b\xe5\xe3\xa4\x56\x75\x2b\x47\x8f\xbd\x23\x8d\xd3\x38\xfa\x3d\x69\x0a\xa5\xda\xc2\x16\x61\xcb\xa4\xa5\xa1\xc1\x34\xe3\x4e\x7b\xf4\xdd\x69\x7b\xb1\xe3\x8e\xda\xf5\xd9\x77\x0d\x83\x8c\xd6\xaf\xfd\xdf\xe9\xff\xff\x21\xbe\x8f\x8d\xe0\xa4\x33\xd8\xb9\x0d\x13\xeb\xd5\x8e\xa1\xd2\xb8\x01\x6e\xea\x0e\xcd\x9d\x8a\x98\xae\x9c\x0e\x3d\xfc\xa5\x0f\xf0\x97\x42\x7a\x65\x98\x71\x1a\xf2\x49\xaf\xdd\x3b\x47\x2b\x65\x69\x78\xc1\xdf\x07\x99\xdd\xfa\xcd\xc4\x2f\x29\x2e\xa4\xa9\xb3\x9e\x1f\x1c\xd6\x4b\xeb\xd7\x0d\xf7\x6f\xd8\x2c\x99\x29\x3b\xe4\x0e\x15\xcb\xae\xd9\x0a\x63\x49\xfb\x0f\xb0\x44\xc1\x71\x83\xb0\x76\xc6\x46\x71\xcb\x40\x0e\x4c\x08\xcc\x1b\x52\x11\xbb\x50\x61\xe8\xaf\x6e\x79\x43\xaf\xd0\xab\x58\x2d\xfc\x8a\x17\xcb\xdd\x42\x63\x01\xa9\x84\x64\x7e\x9e\x8c\xda\x63\x32\xe2\xa1\x5f\x2d\xd3\xb6\x5f\xcb\x08\x4a\x02\x11\x71\x2c\x69\x8c\xd7\x68\x8e\x9a\x6c\xe0\xc7\x93\xff\x1b\xfe\x4f\x95\xd7\x2b\xee\x37\xe8\x67\xe7\x4f\xa9\x42\x3d\x7e\xfa\xb6\x77\x13\xc8\x0b\xf9\x57\x00\x00\x00\xff\xff\xc5\x41\x12\x64\x90\x36\x00\x00")

func completionShBytes() ([]byte, error) {
	return bindataRead(
		_completionSh,
		"completion.sh",
	)
}

func completionSh() (*asset, error) {
	bytes, err := completionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "completion.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"completion.sh": completionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"completion.sh": &bintree{completionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

