// Code generated by go-bindata DO NOT EDIT.
// sources:
// completion.sh
package completion

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _completionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x6d\x6f\x1c\xb7\xf1\x7f\x7f\x9f\x62\xb2\x77\x80\x25\x59\x1b\x49\xff\x7f\xdf\x54\xf2\x19\x49\xfd\x50\x04\x48\xe2\xa0\x69\x5e\x14\x82\x70\xe0\xed\xce\xde\xb2\xe2\x91\x0b\x3e\xdc\xf9\xaa\xea\xbb\x17\x43\x72\x9f\x6e\x57\x8a\xdd\xca\x96\xdd\x6a\x81\xc0\x3a\x2e\x39\x1c\xce\xfc\xe6\x37\xe4\x66\x38\xfd\xe6\x64\xc9\xe5\xc9\x92\x99\x72\x32\x99\xc2\x62\x91\x67\xca\x2c\x5e\x94\x28\x2a\xd4\x50\x38\x99\xbd\xa4\xe6\xd0\x9a\x09\x0e\xc6\x2d\x33\xb5\x5e\x33\x99\xbf\x9c\x4c\x62\xf7\x1c\x97\x6e\x75\x70\x08\x37\x13\x00\x00\x5e\xc0\xe5\x25\xa4\x12\x66\x37\xaf\x5f\xbd\xfb\x75\xf1\xea\xdd\x4f\xbf\x2c\x5e\xbf\xf9\xd3\x6f\x7f\x5e\xbc\xfd\xe1\xc7\x37\xb7\x70\x75\x75\x01\xb6\x44\xe9\x7b\xd3\x83\x59\xa9\x20\x99\xdd\xbc\xfd\xed\xe7\x57\x3f\x7f\xff\xd3\x9b\xcb\xb3\xab\xdb\x73\x98\x1d\x25\xf0\xf2\x25\xb5\x8f\x8a\x49\xfc\xf0\x82\x4f\x6e\x27\xa4\xf9\x6b\x2c\x98\x13\x16\x96\x58\xb2\x0d\x57\x1a\xac\x82\x15\x5a\x9a\x08\x24\xbe\xb7\x10\xb5\x86\x42\xab\xb5\x6f\xcd\x9c\xd6\x28\x9b\x17\xdf\xc2\x0f\x32\xb4\x33\x83\xa0\x0a\x48\x53\xb2\x02\xd0\x98\x35\xdb\x2d\x11\x94\x2d\x51\x83\xe1\xd6\x31\xcb\x95\x34\x93\x29\xf0\x30\xa4\x70\xd6\x69\x04\x5b\x32\x0b\xa6\x54\x4e\xe4\x80\x32\x27\xc9\x95\x40\xea\x7b\x0c\xb6\xe4\x06\x34\x5a\xa7\xa5\x81\xb3\xe3\x20\x6c\xcb\x0d\xc2\xe9\x64\x3a\x99\xc2\xf7\xc6\xb8\x35\x1a\x60\x30\xab\x35\xdd\x30\xcd\xd9\x52\x20\xe0\x7b\x6e\xac\xa9\x27\xcb\x98\x10\x5c\xae\x20\x53\xd2\xd2\xc2\xfc\xac\x5b\x2e\x84\x6f\x61\xb5\x4a\xca\xc9\xbc\xe3\xad\xbd\x29\x3e\x4a\x38\x37\x5d\x83\x4d\xa6\xb0\x55\x3a\x87\x25\x52\x47\xdc\x30\xe1\x98\xc5\x8e\x61\xb9\xac\x9c\x05\x63\x35\xbd\x3f\xf0\x0b\xe7\x06\x72\x2c\xb8\xc4\x9c\x26\x8a\xb0\x59\x93\xae\x46\x45\x8b\xc9\x67\xe4\x3c\x60\x50\x69\xb5\x14\xb8\x3e\x6c\xd1\xe5\x3d\xbb\x88\x0b\x59\x54\x4c\x1b\x6c\xd0\xb6\x2d\xb9\x40\xb8\x84\x64\x96\x25\x90\x0a\x4b\x7f\x90\x7a\x09\x5c\x5d\x40\xae\x1a\x8c\xf1\x79\x32\xbb\xa1\x17\xe6\x32\xbb\x8a\xe0\xa1\xc7\x7b\x3b\x99\xf1\x04\x78\x0b\x48\x7a\x82\xfb\xff\x99\x96\x87\xbd\x66\x7a\xa6\x84\x71\x0f\x0e\x4e\xd6\x2c\x04\x5b\x1d\x43\xa6\x96\x9a\x81\xb1\xaa\x32\x40\x2a\xd2\xe2\xf9\x7a\x8d\x39\x67\x16\xc5\x8e\x16\xba\xc5\x88\x00\x28\x51\xe3\x40\x6c\x7c\x77\x36\x78\x71\x71\xd1\xd7\xec\xe8\x70\xbf\xe9\x68\xa8\x64\x34\xd7\x9c\xd6\x76\x31\xb2\x84\x59\x46\xda\x63\x51\x60\x66\xf9\x86\x34\x5c\x09\xb5\x64\x82\x14\x0d\x90\x62\x3b\xe0\x16\x32\x26\x21\xd3\x6c\x2b\xc0\x96\x5a\xb9\x55\xe9\x7d\xcc\xf4\xca\xad\x51\x5a\x03\x2c\x80\xa3\xd2\x6a\xa5\xd9\x7a\x64\x22\xc9\x36\x7c\xc5\x2c\x9a\x18\x2a\x32\xa3\x88\x00\xab\x11\x7d\x70\x19\x45\xba\x78\x00\x33\xb1\x65\x3b\x43\x30\x68\xc2\xd6\x49\x8d\x2c\xf7\x88\x1b\x91\xcd\x0a\x4b\x34\xc5\x65\x4e\xe6\xde\x8f\xf5\x63\xb2\x38\x97\x99\x46\x52\x95\x66\x59\x62\xa1\x34\xc2\x52\x23\xbb\xa6\x11\xca\x59\x0a\x75\x1a\x28\x94\xaa\x06\x33\x1c\x1c\x64\xcf\x9f\x1f\x0e\x8d\xeb\x05\xdc\xe7\x27\x34\x2c\x9b\x8c\x49\xc9\x95\x0c\x9e\x8f\xde\x3e\x25\xfe\x8a\x48\x2f\x99\xcc\x05\x12\xd0\x2b\x8d\x95\xd8\x35\x20\xef\xf2\x2c\x24\x2d\xad\x18\xcf\x92\x13\xdf\x47\xa8\x8c\x09\xe0\xf3\xd3\xf0\xb3\x50\xba\xc3\x3f\x14\x75\xc9\xec\xbb\xa4\x17\x12\x53\x28\xb8\x20\xfb\x91\x15\x3a\x42\x29\xa6\xb2\x92\x34\x7d\x66\x61\xcd\x6c\x56\xf6\xf8\xb2\xe7\x8a\x40\xf6\xb3\xce\x4c\xf3\x39\x85\xa0\xd3\xc9\xd1\x90\xe8\xc3\xac\x59\x89\xd9\x35\x8d\xf4\x52\xdb\x91\xaa\x28\x50\x13\x43\xd4\x41\x15\x70\xc8\xb2\x0c\x2b\x02\x9a\x6c\x50\x17\x35\xe4\x06\xd6\x4c\x5f\x63\x0e\xcb\x1d\xbd\x9e\xef\x4d\xc4\x0b\x30\xea\x18\x18\x98\x8a\x65\x48\xdd\xa5\xa2\x15\x49\xc7\x84\xd8\x01\xcb\x73\xcc\xc1\x70\x99\x05\xbc\x39\x83\xda\xc7\xc4\xfb\x0a\x33\x62\x34\xab\xa8\x0f\x14\x4e\x7b\xe6\xf7\xbc\xd6\x9b\x22\x92\x47\xbb\x86\x01\x8b\x80\x67\x92\xa3\xf9\x48\x80\xd2\x43\x49\xed\x2f\x6f\x7e\xf9\xf1\x6f\x97\xfc\xf9\xf3\xab\x79\x4f\xd4\xe8\x80\x8b\x61\x28\x7f\xbc\x68\xf8\x20\xd9\x3d\x08\x17\xbc\x45\xef\x2d\xe5\xdb\x57\x4c\x08\x13\xa2\xad\x4d\x32\xe4\x07\xe5\x74\x37\x8b\x6c\x50\x7a\x50\x7d\x3b\x99\xc2\x5f\xdf\xbd\x7e\x77\xde\x3a\xd1\xc3\xdd\x77\x63\xd2\xb3\x3e\x5b\x8a\x1d\x05\x3f\xcd\x02\x6b\x0a\x54\x7c\x5f\x09\x9e\x71\x2b\x76\x34\x9c\x32\x09\x8b\x49\x2c\xe4\x38\x21\xd4\x96\x24\xd4\xd9\xcc\x84\x74\xb6\x9f\xcd\x4c\xa6\xaa\x40\x36\x4c\x13\xe4\xb4\xc6\xcc\x9e\x4f\xa6\x35\x51\x18\xd2\x4a\xb3\x1d\x71\x41\xbb\x1a\x13\x92\x76\xc3\x58\xa5\x12\xb9\x69\x07\x9d\xd7\xf8\xf5\x2b\xb7\xca\xcf\x06\x5c\x5a\xb5\x17\xcf\xad\x44\x1f\xd0\x93\x06\x9c\xac\x19\xbd\x65\x06\x56\x7c\x83\xf2\x38\x46\x47\xc8\xbb\x3e\xf5\x12\xee\x33\xeb\x98\x68\x7a\xd3\x7f\x7e\x32\xcf\xc4\xc6\xa8\x8c\x87\x0c\x1c\x35\x6d\x09\x60\x9d\x87\xc8\xbf\xa9\x97\x74\xf9\xdd\xd5\x6d\x9f\x05\xea\x08\x5e\xe7\x31\x74\x43\xcf\x64\x3c\x7a\xfb\x4c\xb4\xbf\xc9\x38\xf7\x72\x22\x21\xd5\x4f\x20\xa6\x0e\x48\x08\x34\x75\x36\xdf\x8b\x58\xb3\x65\x15\xa4\xa4\x73\xe3\x03\xc9\xc8\xdd\xb4\x9a\x45\xaf\x73\x2b\x70\xde\x2c\xef\xe4\x24\x3d\x59\xdc\x4e\xee\xd1\xb8\x46\x04\xb9\xa9\xf5\xec\xec\x46\x30\xd3\xe8\x74\xbb\x98\xdd\xb4\xd2\x6f\xfb\xc1\xd2\x55\x7e\x7e\xef\xb8\xbe\x11\x3a\xfd\xe6\xb3\x9e\x05\x7a\xfd\x78\x01\x39\x66\x82\x60\x9a\x16\x90\xf4\x7a\x26\xf0\x12\x4e\x72\xdc\x9c\x48\x27\xc4\x88\x6f\xe8\x99\xdd\x69\x5c\x14\x66\xb8\xe5\xe8\x1b\x67\x76\xd3\x1d\x7d\x0b\xb9\xc2\x40\x99\x3e\xa8\xfa\x76\x88\x84\x50\x3f\x21\x9b\xdd\x45\x17\x75\x40\x18\xe5\x74\x86\x8b\x4a\xb8\x15\x97\x8b\x4e\xca\x69\x32\x1d\xf9\x39\xe7\xfa\x8e\x7c\x65\xae\x79\x45\x26\x0a\x02\xbc\x7e\x94\xa3\x4a\xb6\xc1\x10\x4c\x35\xc1\xe5\x9c\x22\x5c\xe9\xdd\x1e\xcc\xd3\x1c\x66\x24\x7e\x14\xdb\x34\x77\x41\xbb\x49\x3f\xf9\xd9\x49\x72\xd4\x9b\x7e\xdc\x66\x7e\x49\x81\xeb\xda\x04\xea\xb7\xc2\x33\x92\x35\x64\xda\x98\x33\xfc\xcb\xb1\x6c\x41\xcf\xd1\xb7\x66\x64\xdb\xd9\xb1\x43\x89\x42\x04\xa2\xc8\xb9\x21\xe2\x9b\xff\xfa\xea\xec\xf4\x8f\xa7\xf7\x8c\x89\x1d\x4d\x77\xf0\x96\x69\x19\x36\x4e\x81\x6d\x32\x46\xe6\x0c\xb4\x1a\xc8\x2f\x78\xec\x4e\xb1\xe1\x75\xbd\x9c\x3b\xbb\x8d\x64\x2d\xbf\xcc\xc1\x3e\x16\xf6\xf3\x0e\x74\xb7\x4c\x30\x44\x56\xf0\x05\x73\xb6\x6c\x20\x14\x37\x42\xd0\x8b\x2f\x5e\xc0\x37\x70\xdf\x81\x62\x0f\x0f\x1d\x3c\x17\xbc\xbb\xc1\xaa\x79\x69\x7e\x90\x08\x6e\x6c\x5a\x69\xb5\xe1\x39\x6a\x93\x40\x22\xd4\x8a\xcb\xf0\xaf\x72\x36\x39\xec\x0c\xa3\xed\x0c\x8d\x09\xa7\x8a\xe4\xb0\xd1\xea\x12\xd2\x7f\xf4\x58\x77\x4f\x91\x7a\x8b\xe1\xf4\xc8\x09\x65\x24\xf5\xdf\xb1\x95\xa4\xe0\xf6\x3a\xf8\x04\xf0\x7b\x27\x8c\x8f\x93\xdb\xcb\x2d\x1f\xbc\x29\x1e\xb1\xf0\x5d\x69\xb3\xef\xe8\x85\x37\xf3\x67\x72\x77\xf4\x1b\xd4\x8e\xf3\xaf\x92\x34\xad\x98\x31\xb4\x11\x9e\x0f\x5a\x52\x0a\x85\x4e\xb3\xe6\x1b\x66\x31\xbd\xc6\x5d\xb7\x31\x80\xa6\x6d\xa1\xbd\x27\x65\xba\xd8\xf2\x50\xf8\x18\xdb\x77\x4e\xe3\xce\xde\xb8\xaa\x52\xda\x86\x9d\x76\xb3\x29\xeb\x90\xe8\x0e\xed\x1d\x67\xd4\xdf\x3d\xa1\x7e\x42\x64\x7e\x28\xa0\xf6\x30\xc3\x8d\x5d\x34\xb1\xfa\x79\xc1\x53\x63\x87\xfc\xfc\x77\xa3\xe4\x83\x45\xff\xff\xae\x77\x07\x84\xa0\x9c\x7d\x1c\xa7\x3e\xf9\xf2\xc1\x7c\x99\x09\x67\x2c\xea\xcf\x9f\xc8\x99\xb5\x2c\x2b\x13\x48\x62\x98\x12\x59\x24\x90\x68\x5c\xab\x0d\xfa\x3f\x88\x9a\x13\x48\x0c\x5a\x57\x3d\xe5\xf5\x7d\xd1\xff\x79\x5e\x8f\xae\x5f\x04\x4f\x3c\x45\x72\xef\xf9\x6a\x23\xd9\x67\xdd\xc7\xcb\xb5\x01\x4c\x98\x3f\x25\xde\x4f\xe8\xe2\x40\x92\x8f\xe8\x64\x21\xfc\xbf\x4e\xb2\x0d\xe3\x82\x8e\xb8\x4f\x6e\xfe\x14\x6e\xa6\x14\xf8\x75\x13\xf3\x17\x67\x54\xbf\x9d\x78\x1c\x9b\xfa\x37\x49\x9a\x66\x2c\xcd\x50\x5b\xd3\x9e\x44\xb9\x34\x98\x39\x8d\x4d\x43\xe7\x58\x4a\xbf\x54\xea\xbf\x1d\x75\x1b\xc2\xe7\xb8\xa7\xb3\xf1\xd7\x17\xdd\x4a\x16\x7c\xf5\xf9\x37\xdc\x06\x69\x7f\x6d\x4a\xb5\x4d\x20\x71\x92\x7e\x3e\x6d\xaa\xe1\xc1\x37\xd5\xde\xbb\xc4\x32\x4f\xbc\x3d\xea\xb7\x7f\x2f\x5c\x16\x84\xdb\x27\x8b\x3e\xa4\x45\x3d\x05\x3c\x99\xf4\x41\x4c\x1a\x92\xf1\x23\x7c\x44\xc9\xf3\xc1\xa7\x93\x27\x52\x87\x87\x26\xf5\xf8\xff\x4e\x59\x9e\x3f\xde\x99\xcb\x55\x39\xb3\x0f\x77\xcc\xfa\xc2\x42\xe7\x91\xbf\x5a\x3c\xe8\x87\x8a\x2f\xcd\xb4\x8f\xf9\xb5\xe0\xbf\xcd\xa6\x43\x2b\xce\xcf\x3e\x03\xcd\x3b\x5b\x26\x90\xc4\x23\x2c\xfd\xe5\x53\x78\xfb\xf1\x3c\x1e\x06\xef\xa1\x7e\x42\xf9\x06\xb5\xe1\x2d\xd0\x43\xbf\xb6\x2e\x24\x94\xfe\xb4\xe7\xad\x45\xce\xb5\x09\x5d\x7d\x39\x68\xaa\x21\x65\x83\xfe\x2f\x5e\xbc\x80\x64\x76\x40\xeb\xad\x4b\x44\x28\x96\x21\x4d\xeb\x2e\x87\xc1\x0d\xf5\xcf\xe7\xf3\x83\x64\x76\xb3\x27\xc6\x7b\xeb\xb0\x4b\xc7\xb1\xd4\xe3\xad\xaf\x76\x8a\x82\xeb\xde\x09\xdc\x21\x61\xa0\xed\xde\x6a\xee\xd7\x36\xf6\x4c\xa9\x67\x54\xba\xaf\xcc\x2f\x8d\x1a\xfb\x35\x2f\x1c\x83\x52\x7b\xf3\xb5\x20\xfc\xbd\x62\x9c\x3b\x07\xfb\xd1\x53\x90\xaa\x5b\xcd\x55\x97\xad\x85\x01\x08\xc8\x7d\xb1\xa4\xf7\x39\x28\xdd\xad\xa7\x7b\x98\xf8\x1b\x3f\xb7\x87\xda\xc2\x91\xd3\x7b\xc7\x42\x9a\xaf\x4a\x0b\x52\x6d\x47\xc6\xfb\x6a\x17\x5f\xf0\x24\x90\x6d\xd0\xd7\xc4\xfa\xba\x66\x65\x51\x5a\x4e\x28\x56\x1a\x72\xb4\x98\x59\x2e\x57\x71\x7d\xbe\x70\xc6\xb2\x6b\x84\x0d\x13\x0e\x0d\x2c\x9d\xf5\x35\x86\x06\x2b\xa6\x7d\x51\x9e\xe0\xd7\xc3\xfa\x99\x29\xa4\xa9\xd7\xce\x0f\x03\x2e\x8d\x25\xa0\xf8\x5b\x07\xd4\x3e\xf7\xed\x23\xc3\xb6\xf8\x4c\xa3\xaf\xc9\xda\x2a\xad\x77\xa4\x09\x5b\x92\xae\xf5\x97\x8a\xbd\x8f\x14\x60\x4b\x5f\xb3\x6d\x14\x70\xfb\xcc\x80\x61\x05\x82\x55\xc0\x57\x52\xc5\x1b\x0b\x83\x59\x3e\xec\x3b\x06\x85\xf2\xd0\x11\x8f\xff\x0d\x64\xc4\x68\x52\x0d\x0b\x2d\xc9\x22\x3e\xdc\xc8\x78\x95\x32\x86\x2f\x05\x0e\xc0\xda\x97\xc3\x25\xc5\xb3\x00\x67\xd8\x0a\x8f\xdb\x8b\x1a\xb1\x76\xdd\x28\x7f\xeb\xc3\x55\xf1\x6a\x44\xb7\x4e\x3e\x4e\x6a\x55\xb7\x68\xf4\xd8\x3b\xd2\x38\x8d\xa3\xdf\x93\xa6\x50\xaa\x2d\x6c\x11\xb6\x4c\x5a\x1a\x1a\x4c\x33\xee\xb4\x47\xdf\x9d\xb6\x77\x3a\xee\x28\x5b\x9f\x7d\xd7\x30\xc8\x68\xfd\xda\xff\x9d\xfe\xff\x1f\xe2\xfb\xd8\x08\x4e\x3a\x83\x9d\x8b\x30\xb1\x5e\xed\x18\x2a\x8d\x1b\xe0\xa6\xee\xd0\x5c\xa7\x88\xe9\xca\xe9\xd0\xc3\xdf\xf7\x00\x7f\x1f\xa4\x57\x81\x19\xa7\x21\x9f\xf4\xda\xbd\x73\xb4\x52\x96\x86\x17\xfc\x7d\x90\xd9\x2d\xdd\x4c\xfc\x92\xe2\x42\x9a\x12\xeb\xf9\xc1\x61\xbd\xb4\x7e\xc9\x70\xff\x72\xcd\x92\x99\xb2\x43\xee\x50\xb1\xec\x9a\xad\x30\x56\xb3\xff\x00\x4b\x14\x1c\x37\x08\x6b\x67\x6c\x14\xb7\x0c\xe4\xc0\x84\xc0\xbc\x21\x15\xb1\x0b\x15\x86\xfe\xd6\x96\x37\xf4\x0a\xbd\x8a\xd5\xc2\xaf\x78\xb1\xdc\x2d\x34\x16\x90\x4a\x48\xe6\xe7\xc9\xa8\x3d\x26\x23\x1e\xfa\xd5\x32\x6d\xfb\xb5\x8c\xa0\x24\x10\x11\xc7\x92\xc6\x78\x83\xe6\xa8\xc9\x06\x7e\x3c\xf9\xbf\xe1\xff\x54\x79\xbd\xe2\x7e\x83\x7e\x76\xfe\x94\x2a\x94\xe2\xa7\x6f\x7b\x97\x80\xbc\x90\x7f\x05\x00\x00\xff\xff\xde\xe1\x26\xe0\x8b\x36\x00\x00")

func completionShBytes() ([]byte, error) {
	return bindataRead(
		_completionSh,
		"completion.sh",
	)
}

func completionSh() (*asset, error) {
	bytes, err := completionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "completion.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"completion.sh": completionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"completion.sh": &bintree{completionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

