// Code generated by go-bindata DO NOT EDIT.
// sources:
// completion.sh
package completion

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _completionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xeb\x6f\x1b\xb9\x11\xff\xae\xbf\x62\x6e\x25\xc0\x8f\x78\xcf\x76\xdb\x2f\xb5\xa3\x20\xd7\x3c\x8a\x00\x77\x97\xa0\xe9\x7d\x28\x5c\x43\xa0\x76\x67\xb5\xac\x29\x72\xc1\x87\x14\xd5\xf5\xff\x5e\x0c\xc9\x7d\x49\x6b\x27\x69\x9d\x38\x69\xbd\xc0\x21\x16\x97\x33\x1c\xce\xe3\x37\xc3\xbd\xe1\xf8\x87\xe3\x39\x97\xc7\x73\x66\xca\xd1\x68\x0c\xb3\x59\x9e\x29\x33\x7b\x5a\xa2\xa8\x50\x43\xe1\x64\xf6\x8c\x86\xc3\x68\x26\x38\x18\x37\xcf\xd4\x72\xc9\x64\xfe\x6c\x34\x8a\xd3\x73\x9c\xbb\xc5\xfe\x01\x5c\x8f\x00\x00\x78\x01\x17\x17\x90\x4a\x98\x5c\xbf\x7c\xf1\xf6\xfd\xec\xc5\xdb\x5f\xde\xcd\x5e\xbe\xfa\xd3\x6f\x7f\x9e\xbd\x7e\xf3\xf3\xab\x1b\xb8\xbc\x3c\x07\x5b\xa2\xf4\xb3\xe9\xc1\xac\x54\x90\x4c\xae\x5f\xff\xf6\xeb\x8b\x5f\x7f\xfa\xe5\xd5\xc5\xe9\xe5\xcd\x19\x4c\x0e\x13\x78\xf6\x8c\xc6\x07\xd9\x24\x9e\xbc\xe0\xa3\x9b\x11\x49\xfe\x12\x0b\xe6\x84\x85\x39\x96\x6c\xc5\x95\x06\xab\x60\x81\x96\x16\x02\x89\x1f\x2c\x44\xa9\xa1\xd0\x6a\xe9\x47\x33\xa7\x35\xca\xe6\xc5\x8f\xf0\x46\x86\x71\x66\x10\x54\x01\x69\x4a\x5a\x00\xa2\x59\xb2\xcd\x1c\x41\xd9\x12\x35\x18\x6e\x1d\xb3\x5c\x49\x33\x1a\x03\x0f\x24\x85\xb3\x4e\x23\xd8\x92\x59\x30\xa5\x72\x22\x07\x94\x39\x71\xae\x04\xd2\xdc\x23\xb0\x25\x37\xa0\xd1\x3a\x2d\x0d\x9c\x1e\x05\x66\x6b\x6e\x10\x4e\x46\xe3\xd1\x18\x7e\x32\xc6\x2d\xd1\x00\x83\x49\x2d\xe9\x8a\x69\xce\xe6\x02\x01\x3f\x70\x63\x4d\xbd\x58\xc6\x84\xe0\x72\x01\x99\x92\x96\x36\xe6\x57\x5d\x73\x21\xfc\x08\xab\x45\x52\x4e\xe6\x1d\x6b\x6d\x2d\xf1\x59\xcc\xb9\xe9\x2a\x6c\x34\x86\xb5\xd2\x39\xcc\x91\x26\xe2\x8a\x09\xc7\x2c\x76\x14\xcb\x65\xe5\x2c\x18\xab\xe9\xfd\xbe\xdf\x38\x37\x90\x63\xc1\x25\xe6\xb4\x50\x74\x9b\x25\xc9\x6a\x54\xd4\x98\xdc\x23\xe3\x01\x83\x4a\xab\xb9\xc0\xe5\x41\xeb\x5d\xde\xb2\xb3\xb8\x91\x59\xc5\xb4\xc1\xc6\xdb\xd6\x25\x17\x08\x17\x90\x4c\xb2\x04\x52\x61\xe9\x0f\x12\x2f\x81\xcb\x73\xc8\x55\xe3\x63\x7c\x9a\x4c\xae\xe9\x85\xb9\xc8\x2e\xa3\xf3\xd0\xe3\xad\x9d\x4c\x78\x02\xbc\x75\x48\x7a\x82\xf9\xff\x95\x96\x07\xbd\x61\x7a\xc6\xe4\xe3\xde\x39\x38\x69\xb3\x10\x6c\x71\x04\x99\x9a\x6b\x06\xc6\xaa\xca\x00\x89\x48\x9b\xe7\xcb\x25\xe6\x9c\x59\x14\x1b\xda\xe8\x1a\xa3\x07\x40\x89\x1a\x77\xd8\xc6\x77\xa7\x3b\x2f\xce\xcf\xfb\x92\x1d\x1e\x6c\x0f\x1d\xee\x0a\x19\xd5\x35\xa5\xbd\x9d\x0f\x6c\x61\x92\x91\xf4\x58\x14\x98\x59\xbe\x22\x09\x17\x42\xcd\x99\x20\x41\x83\x4b\xb1\x0d\x70\x0b\x19\x93\x90\x69\xb6\x16\x60\x4b\xad\xdc\xa2\xf4\x36\x66\x7a\xe1\x96\x28\xad\x01\x16\x9c\xa3\xd2\x6a\xa1\xd9\x72\x60\x21\xc9\x56\x7c\xc1\x2c\x9a\x18\x2a\x32\xa3\x88\x00\xab\x11\x7d\x70\x19\x45\xb2\x78\x07\x66\x62\xcd\x36\x86\xdc\xa0\x09\x5b\x27\x35\xb2\xdc\x7b\xdc\x00\x6f\x56\x58\x82\x29\x2e\x73\x52\xf7\x76\xac\x1f\x91\xc6\xb9\xcc\x34\x92\xa8\xb4\xca\x1c\x0b\xa5\x11\xe6\x1a\xd9\x15\x51\x28\x67\x29\xd4\x89\x50\x28\x55\xed\xac\xb0\xbf\x9f\x3d\x79\x72\xb0\xab\x5c\xcf\xe0\x2e\x3b\xa1\x61\xd9\x68\x88\x4b\xae\x64\xb0\x7c\xb4\xf6\x09\xe1\x57\xf4\xf4\x92\xc9\x5c\x20\x39\x7a\xa5\xb1\x12\x9b\xc6\xc9\xbb\x38\x0b\x49\x0b\x2b\xc6\xa3\xe4\xc8\xcf\x11\x2a\x63\x02\xf8\xf4\x24\xfc\x2c\x94\xee\xe0\x0f\x45\x5d\x32\x79\x9e\xf4\x42\x62\x0c\x05\x17\xa4\x3f\xd2\x42\x87\x29\xc5\x54\x56\x92\xa4\x7b\x16\x96\xcc\x66\x65\x0f\x2f\x7b\xa6\x08\x60\x3f\xe9\xac\x34\x9d\x52\x08\x3a\x9d\x1c\xee\x02\x7d\x58\x35\x2b\x31\xbb\x22\x4a\xcf\xb5\xa5\x54\x45\x81\x9a\x10\xa2\x0e\xaa\xe0\x87\x2c\xcb\xb0\x22\x47\x93\x8d\xd7\x45\x09\xb9\x81\x25\xd3\x57\x98\xc3\x7c\x43\xaf\xa7\x5b\x0b\xf1\x02\x8c\x3a\x02\x06\xa6\x62\x19\xd2\x74\xa9\x68\x47\xd2\x31\x21\x36\xc0\xf2\x1c\x73\x30\x5c\x66\xc1\xdf\x9c\x41\xed\x63\xe2\x43\x85\x19\x21\x9a\x55\x34\x07\x0a\xa7\x3d\xf2\x7b\x5c\xeb\x2d\x11\xc1\xa3\xdd\xc3\x0e\x8a\x80\x47\x92\xc3\xe9\x40\x80\xd2\x43\x49\xed\x2f\xaf\xde\xfd\xfc\xb7\x0b\xfe\xe4\xc9\xe5\xb4\xc7\x6a\x90\xe0\x7c\x37\x94\x3f\x9f\x35\x7c\x12\xef\x9e\x0b\x17\xbc\xf5\xde\x1b\xca\xb7\x2f\x98\x10\x26\x44\x5b\x9b\x64\xc8\x0e\xca\xe9\x6e\x16\x59\xa1\xf4\x4e\xf5\xe3\x68\x0c\x7f\x7d\xfb\xf2\xed\x59\x6b\x44\xef\xee\x7e\x1a\x93\x1e\xf5\xd9\x5c\x6c\x28\xf8\x69\x15\x58\x52\xa0\xe2\x87\x4a\xf0\x8c\x5b\xb1\x21\x72\xca\x24\x2c\x26\xb1\x90\xe3\x84\x50\x6b\xe2\x50\x67\x33\x13\xd2\xd9\x76\x36\x33\x99\xaa\x02\xd8\x30\x4d\x2e\xa7\x35\x66\xf6\x6c\x34\xae\x81\xc2\x90\x54\x9a\x6d\x08\x0b\xda\xdd\x98\x90\xb4\x1b\xc4\x2a\x95\xc8\x4d\x4b\x74\x56\xfb\xaf\xdf\xb9\x55\x7e\x35\xe0\xd2\xaa\xad\x78\x6e\x39\xfa\x80\x1e\x35\xce\xc9\x1a\xea\x35\x33\xb0\xe0\x2b\x94\x47\x31\x3a\x42\xde\xf5\xa9\x97\xfc\x3e\xb3\x8e\x89\x66\x36\xfd\xe7\x17\xf3\x48\x6c\x8c\xca\x78\xc8\xc0\x51\xd2\x16\x00\x96\x79\x88\xfc\xeb\x7a\x4b\x17\xcf\x2f\x6f\xfa\x28\x50\x47\xf0\x32\x8f\xa1\x1b\x66\x26\xc3\xd1\xdb\x47\xa2\xed\x22\xe3\xcc\xf3\x89\x80\x54\x3f\x01\x98\x3a\x4e\x42\x4e\x53\x67\xf3\xad\x88\x35\x6b\x56\x41\x4a\x32\x37\x36\x90\x8c\xcc\x4d\xbb\x99\xf5\x26\xb7\x0c\xa7\xcd\xf6\x8e\x8f\xd3\xe3\xd9\xcd\xe8\x0e\x89\x6b\x8f\x20\x33\xb5\x96\x9d\x5c\x0b\x66\x1a\x99\x6e\x66\x93\xeb\x96\xfb\x4d\x3f\x58\xba\xc2\x4f\xef\xa4\xeb\x2b\xa1\x33\x6f\x3a\xe9\x69\xa0\x37\x8f\x17\x90\x63\x26\xc8\x4d\xd3\x02\x92\xde\xcc\x04\x9e\xc1\x71\x8e\xab\x63\xe9\x84\x18\xb0\x0d\x3d\x93\x5b\x95\x8b\xc2\xec\x96\x1c\x7d\xe5\x4c\xae\xbb\xd4\x37\x90\x2b\x0c\x90\xe9\x83\xaa\xaf\x87\x08\x08\xf5\x13\xb2\xd9\x6d\x70\x51\x07\x84\x51\x4e\x67\x38\xab\x84\x5b\x70\x39\xeb\xa4\x9c\x26\xd3\x91\x9d\x73\xae\x6f\xc9\x57\xe6\x8a\x57\xa4\xa2\xc0\xc0\xcb\x47\x39\xaa\x64\x2b\x0c\xc1\x54\x03\x5c\xce\x29\xc2\x95\xde\x6c\xb9\x79\x9a\xc3\x84\xd8\x0f\xfa\x36\xad\x5d\x50\x35\xe9\x17\x3f\xf5\x87\xa2\xe3\xe4\xb0\x27\xc3\xb0\xe2\xfc\xbe\x02\xe0\xb5\x59\xd4\xd7\xc3\x13\x62\xb8\x0b\xb7\x31\x71\xf8\x97\x43\x29\x83\x9e\xc3\x1f\xcd\x40\xed\xd9\x51\x46\x89\x42\x04\xb4\xc8\xb9\x21\xf4\x9b\xbe\x7f\x71\x7a\xf2\xc7\x93\x3b\x68\xe2\x44\xd3\x25\x5e\x33\x2d\x43\xf5\x14\x20\x27\x63\xa4\xd3\x80\xad\x01\x01\x83\xd9\x6e\x65\x1b\x5e\xd7\xdb\xb9\x75\xda\x40\xea\xf2\xdb\xdc\x29\x66\x61\x3b\xf9\x40\xb7\x6e\x82\x21\xf7\xf2\xc6\x60\xce\x96\x8d\x23\xc5\x72\x08\x7a\x51\xc6\x0b\xf8\x01\xee\x3a\x56\x6c\x79\x45\xc7\xab\x0b\xde\x2d\xb3\x6a\x74\x9a\xee\x27\x82\x1b\x9b\x56\x5a\xad\x78\x8e\xda\x24\x90\x08\xb5\xe0\x32\xfc\xab\x9c\x4d\x0e\x3a\x64\x54\xd4\x10\x4d\x38\x5b\x24\x07\x8d\x54\x17\x90\xfe\xb3\x87\xbd\x5b\x82\xd4\x85\x86\xd3\x03\xe7\x94\x81\x02\xe0\x96\x82\x92\x42\xdc\xcb\xe0\xd3\xc0\xc7\xce\x19\x9f\xc7\xb7\x97\x61\x3e\xb9\x34\x1e\xd0\xf0\x6d\xc9\xd3\x17\xca\x8d\xa1\x67\x5e\xcd\x5f\xc9\xdc\xd1\x6e\x50\x1b\xce\xbf\x4a\xd2\xb4\x62\xc6\x50\x39\x3c\xdd\x19\x49\x29\x16\x3a\xc3\x9a\xaf\x98\xc5\xf4\x0a\x37\xdd\xc1\xe0\x34\xed\x08\x55\xa0\x94\xef\xe2\xc8\x7d\xf9\xc7\x50\xf5\x39\x8e\xf5\xbd\x71\x55\xa5\xb4\x0d\xf5\x76\x53\x9a\x75\xa0\x74\x83\xf6\x96\x93\xea\x47\xcf\xa9\x5f\xd0\x33\x3f\xd5\xa1\xb6\x7c\x86\x1b\x3b\x6b\x62\xf5\xeb\x3a\x4f\xed\x3b\x64\xe7\x7f\x18\x25\xef\x2d\xfa\xff\x7f\xad\xbb\x03\x08\xca\xd9\x87\x31\xea\xa3\x2d\xef\xcd\x96\x99\x70\xc6\xa2\xfe\xfa\x89\x9c\x59\xcb\xb2\x32\x81\x24\x86\x29\x81\x45\x02\x89\xc6\xa5\x5a\xa1\xff\x83\xa0\x39\x81\xc4\xa0\x75\xd5\x63\x5e\xdf\x66\xfd\xdf\xe7\xf5\x68\xfa\x59\xb0\xc4\x63\x24\xf7\x9e\xef\x36\x92\x7d\xd6\x7d\xb8\x5c\x1b\x9c\x09\xf3\xc7\xc4\xfb\x05\x4d\x1c\x40\xf2\x01\x8d\x2c\x84\xff\xd7\x49\xb6\x62\x5c\xd0\x19\xf7\xd1\xcc\x5f\xc2\xcc\x94\x02\xbf\x6f\x60\xfe\xe6\x94\xea\xcb\x89\x87\xd1\xa9\x7f\x93\xa4\x69\xc6\xd2\x0c\xb5\x35\xed\x49\x94\x4b\x83\x99\xd3\xd8\x0c\x74\x8e\xa5\xf4\x4b\xa5\xfe\xe3\x51\x77\x20\x7c\x94\x7b\x3c\x1b\x7f\x7f\xd1\xad\x64\xc1\x17\x5f\xbf\xe0\x36\x48\xf5\xb5\x29\xd5\x3a\x81\xc4\x49\xfa\xf9\x58\x54\xc3\xbd\x17\xd5\xde\xba\x84\x32\x8f\xb8\x3d\x68\xb7\xff\x2c\x5c\x66\xe4\xb7\x8f\x1a\xbd\x4f\x8d\x7a\x08\x78\x54\xe9\xbd\xa8\x34\x24\xe3\x07\xf8\x88\x92\xe7\x3b\x9f\x4e\x1e\x41\x1d\xee\x1b\xd4\xe3\xff\x41\x65\x79\xfe\x70\x67\x2e\x57\xe5\xcc\xde\xdf\x31\xeb\x1b\x0b\x9d\x07\xfe\x6a\x71\xaf\x1f\x2a\xbe\x35\xd5\x3e\xe4\xd7\x82\xff\x35\x9d\xee\x6a\x71\x7a\xfa\x15\x60\xde\xd9\x32\x81\x24\x1e\x61\xe9\x2f\x9f\xc2\xdb\x8f\xe7\xf1\x30\x78\x07\xf4\x93\x97\xaf\x50\x1b\xde\x3a\x7a\x98\xd7\x76\x87\x84\x06\xa0\xf6\xbc\x35\xcb\xb9\x36\x61\x6a\x68\xfb\x7d\xf3\xfa\xfd\x74\xb2\xf7\x77\xb9\x07\xbe\x49\x34\xd5\x20\xb8\xc4\x73\xc8\xd5\x36\x97\x27\xd3\xfd\x64\x42\x2f\x93\x83\xf3\xd0\x5f\xf6\x14\x9e\xee\x93\x4e\xea\x66\x12\x8a\x77\x48\xd3\x9a\x20\x48\xde\x23\xbf\xde\xe2\xe9\x0d\x7a\xd0\x45\xec\xd8\x0e\xf2\xda\xb7\x45\x45\xbe\xf5\xec\x04\x6e\xe1\xf0\x89\x1b\xda\x52\xc3\xe7\x6c\x28\xd2\xa5\x44\x37\x24\xef\xbb\x46\xd2\xed\xfe\x19\x8e\x41\xee\xad\xc5\x5b\x57\xfe\x58\x63\xcf\xad\xc4\x9e\x7a\x0c\x52\x75\x3b\xc3\xea\x16\xb8\x40\x80\x80\xdc\x37\x5e\x7a\xcf\x01\xa5\xbb\xbd\x79\xf7\x13\xc5\xc3\xa7\xff\xd0\xa7\x38\xf0\x0d\xa0\xa3\x21\xcd\x17\xa5\x05\xa9\xd6\x03\xf4\xbe\x69\xc6\x37\x4f\x09\x64\x2b\xf4\xfd\xb5\xbe\x47\x5a\x59\x94\x96\x53\x2c\x28\x0d\x39\x5a\xcc\x2c\x97\x8b\xb8\x3f\xdf\x7f\x63\xd9\x15\xc2\x8a\x09\x87\x06\xe6\xce\xfa\x7e\x45\x83\x15\xd3\xbe\xc1\x4f\xf0\xab\xdd\x36\x9c\x31\xa4\xa9\x97\xce\x93\x01\x97\xc6\x92\xef\xf8\x1b\x0c\x34\x3e\xf5\xe3\x03\x64\x6b\xdc\xd3\xe8\xfb\xbb\xd6\x4a\xeb\x0d\x49\xc2\xe6\x24\x6b\xfd\xbd\x63\xeb\x53\x07\xd8\xd2\xf7\x7f\x1b\x05\xdc\xee\x19\x30\xac\x40\xb0\x0a\xf8\x42\xaa\x78\xfb\x61\x67\x95\x4f\xfb\x1a\x42\x80\xb0\x6b\x88\x87\xff\x92\x32\xa0\x34\xa9\x76\x9b\x36\x49\x23\x3e\xda\x48\x79\x95\x32\x86\xcf\x05\xee\x38\x6b\x9f\x0f\x97\x14\xe2\x02\x9c\x61\x0b\x3c\x6a\x2f\x7d\xc4\x3e\x78\xa3\xfc\x0d\x12\x57\xc5\x6b\x16\xdd\x9e\xfb\xb8\xa8\x55\xdd\x06\xd4\x23\x6f\x48\xe3\x34\x0e\x7e\x95\x1a\x43\xa9\xd6\xb0\x46\x58\x33\x69\x89\x34\xa8\x66\xd8\x68\x0f\x5e\xe3\xb6\xf7\x43\x6e\x69\x81\x9f\x3c\x6f\x10\x64\xb0\x0d\xee\x77\x27\xbf\xff\x43\x7c\x1f\x07\xc1\x49\x67\xb0\x73\xa9\x26\xb6\xbd\x1d\x41\xa5\x71\x05\xdc\xd4\x13\x9a\xab\x19\x31\xe9\x39\x1d\x66\xf8\xbb\x23\xe0\xef\x96\xf4\xba\x39\xe3\x32\x64\x93\xde\xb8\x37\x8e\x56\xca\x12\x79\xc1\x3f\x04\x9e\xdd\x36\xd0\xc4\x6f\x29\x6e\xa4\x69\xd7\x9e\xee\x1f\xd4\x5b\xeb\xb7\x1f\xf7\x2f\xea\xcc\x99\x29\x3b\xd8\x0e\x15\xcb\xae\xd8\x02\x63\x67\xfc\x1b\x98\xa3\xe0\xb8\x42\x58\x3a\x63\x23\xbb\x79\x00\x07\x26\x04\xe6\x0d\xa8\x88\x4d\x68\x54\xf4\x37\xc0\xbc\xa2\x17\xe8\x45\xac\x66\x7e\xc7\xb3\xf9\x66\xa6\xb1\x80\x54\x42\x32\x3d\x4b\x06\xf5\x31\x1a\xb0\xd0\x7b\xcb\xb4\xed\xb7\x44\x82\x92\x40\x40\x1c\x3b\x23\xe3\x6d\x9c\xc3\x26\x1b\x78\x7a\xb2\x7f\x83\xff\xa9\xf2\x72\xc5\xaa\x85\x7e\x76\xfe\x94\x2a\xb4\xf5\xa7\xaf\x7b\x17\x8a\x3c\x93\x7f\x07\x00\x00\xff\xff\xd3\x75\x5d\x9f\xd7\x36\x00\x00")

func completionShBytes() ([]byte, error) {
	return bindataRead(
		_completionSh,
		"completion.sh",
	)
}

func completionSh() (*asset, error) {
	bytes, err := completionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "completion.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"completion.sh": completionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"completion.sh": &bintree{completionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

