// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// completion.sh
package completion

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _completionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdd\x6f\xdb\xc8\x11\x7f\x2e\xff\x8a\x39\x4a\x40\x6c\xc7\x3a\x27\xaf\x76\x15\xe4\x9a\x8f\x22\xc0\xdd\xe5\xd0\xeb\x3d\x14\x86\x41\x2c\x97\x43\x71\xeb\xd5\x2e\xb1\x1f\x92\x55\xc3\xff\x7b\x31\xbb\xfc\x94\x68\x5d\x82\x38\xe9\x43\x43\x20\x88\xbc\x1f\x33\xb3\x33\xbf\xdf\xcc\x72\x38\xfb\xe1\x22\x17\xea\x22\x67\xb6\x4a\x92\x19\x64\x59\xc1\xb5\xcd\xfe\x5a\xa1\xac\xd1\x40\xe9\x15\x7f\x45\xc3\x71\x94\x4b\x01\xd6\xe7\x5c\xaf\xd7\x4c\x15\xaf\x92\xa4\x59\x5e\x60\xee\x57\x27\xa7\x70\x9f\x00\x00\x88\x12\xae\xaf\x61\xa1\x60\x7e\xff\xf6\xcd\xc7\xdf\xb3\x37\x1f\x7f\xf9\x2d\x7b\xfb\xee\x6f\x7f\xfc\x3d\x7b\xff\xe1\xe7\x77\x0f\x70\x73\x73\x05\xae\x42\x15\x56\xd3\x83\xbc\xd2\x90\xce\xef\xdf\xff\xf1\xeb\x9b\x5f\x7f\xfa\xe5\xdd\xf5\xcb\x9b\x87\x4b\x98\x9f\xa5\xf0\xea\x15\x8d\x4f\x8a\x49\xc3\xf6\x52\x24\x0f\x90\x90\xe9\x6f\xb1\x64\x5e\x3a\xc8\xb1\x62\x1b\xa1\x0d\x38\x0d\x2b\x74\xa4\x09\x14\xde\x39\x68\xcc\x86\xd2\xe8\x75\x18\xe5\xde\x18\x54\xdd\xc4\x8f\xf0\x41\xc5\x71\x66\x11\x74\x09\x8b\x05\xb9\x01\x68\xcf\x9a\xed\x72\x04\xed\x2a\x34\x60\x85\xf3\xcc\x09\xad\x6c\x32\x03\x11\xb7\x94\xde\x79\x83\xe0\x2a\xe6\xc0\x56\xda\xcb\x02\x50\x15\x24\xb9\x96\x48\x6b\xcf\xc1\x55\xc2\x82\x41\xe7\x8d\xb2\xf0\xf2\x3c\x0a\xdb\x0a\x8b\xf0\x22\x99\x25\x33\xf8\xc9\x5a\xbf\x46\x0b\x0c\xe6\xad\xa5\x1b\x66\x04\xcb\x25\x02\xde\x09\xeb\x6c\xab\x8c\x33\x29\x85\x5a\x01\xd7\xca\xd1\xc1\x82\xd6\xad\x90\x32\x8c\xb0\xd6\x24\xed\x55\x31\x08\xd7\x9e\x8a\xcf\x12\x2e\xec\xd0\x61\xc9\x0c\xb6\xda\x14\x90\x23\x2d\xc4\x0d\x93\x9e\x39\x1c\x38\x56\xa8\xda\x3b\xb0\xce\xd0\xfc\x49\x38\xb8\xb0\x50\x60\x29\x14\x16\xa4\xa8\xc1\xcd\x9a\x6c\xb5\xba\xf1\x98\x7a\x46\xc1\x03\x06\xb5\xd1\xb9\xc4\xf5\x69\x0f\xaf\x10\xd9\xac\x39\x48\x56\x33\x63\xb1\x83\xdb\xb6\x12\x12\xe1\x1a\xd2\x39\x4f\x61\x21\x1d\xfd\x20\xf3\x52\xb8\xb9\x82\x42\x77\x20\x13\xcb\x74\x7e\x4f\x13\xf6\x9a\xdf\x34\xe8\xa1\x27\x44\x3b\x9d\x8b\x14\x44\x8f\x48\x7a\x62\xf8\x4f\x47\x63\xf4\xcc\x08\xe1\x01\x19\xc2\x42\x6d\xd0\x12\x86\x18\x79\xb5\x94\x6c\x75\x0e\x5c\xe7\x86\xc5\x78\x88\x95\xd2\x06\x01\x37\x68\x76\xae\x22\x6f\xb0\xd2\x11\x84\x34\x58\xa7\xeb\x01\x3e\x0e\xb4\x44\xa4\xc0\xcb\x83\x89\xab\xab\xb1\x95\x67\xa7\xfb\x43\x67\x87\x36\x37\xae\x5b\xd2\x39\xaf\x26\x4e\x34\xe7\x74\x18\x2c\x4b\xe4\x4e\x6c\x50\xee\x60\x25\x75\xce\x24\x59\x1a\xe1\xc5\x76\x20\x1c\x70\xa6\x80\x1b\xb6\x95\xe0\x2a\xa3\xfd\xaa\x0a\xf1\x66\x66\xe5\xd7\xa8\x9c\x25\x37\xd0\x40\x6d\xf4\xca\xb0\xf5\x84\x22\xc5\x36\x62\xc5\x1c\xda\x86\x36\x8a\xd3\xe9\xc1\x19\xc4\x40\x34\xab\xc9\x96\xe0\x3c\x26\xb7\x6c\x67\x09\x12\x1d\x85\xbd\x32\xc8\x8a\x80\xbe\x09\xd9\xd1\xb7\xa5\x50\x05\x79\x7a\x9f\xf7\xe7\xb0\x25\x64\x72\x83\x64\x2a\x69\xc9\xb1\xa4\xe8\xe4\x06\xd9\x2d\xed\xd0\xde\x11\xed\x69\xa3\xd4\xba\x3e\xd0\x70\x72\xc2\x9f\x3f\x3f\x3d\x74\x6e\x10\x70\x2c\x4e\x68\x19\x4f\xa6\xa4\x14\x5a\x61\xf8\xd1\x44\xfb\x45\xf2\xd0\x25\xd5\x8a\xa9\x42\x22\x81\xbe\x36\x58\xcb\x5d\x07\xf8\x61\xd2\x85\xb4\x87\x90\x0d\x29\x33\x09\x6b\xa4\xe6\x4c\x82\x58\xbe\x88\x7f\x96\xda\x0c\xb0\x46\x0c\x4c\xe7\xaf\xd3\x11\x3d\x66\x50\x0a\x49\xfe\x23\x2f\x0c\x84\x12\xbf\x78\x45\x96\x3e\x73\xb0\x66\x8e\x57\xa3\xdc\x39\x0a\x45\xcc\xfc\xf3\x81\xa6\xe5\x92\xe8\xe8\x4d\x7a\x76\x98\xf5\xa3\x56\x5e\x21\xbf\xa5\x9d\x41\x6a\xbf\x53\x97\x25\x1a\xca\x16\x2d\xb1\x22\x0e\x19\xe7\x58\x13\xd0\x54\x87\xba\xc6\x42\x61\x61\xcd\xcc\x2d\x16\x90\xef\x68\x7a\xb9\xa7\x48\x94\x60\xf5\x39\x30\xb0\x35\xe3\x48\xcb\x95\xa6\x13\x29\xcf\xa4\xdc\x01\x2b\x0a\x2c\xc0\x0a\xc5\x23\xde\xbc\x45\x13\x38\x71\x57\x23\xa7\xec\xe6\x34\xad\x81\xd2\x9b\x50\x05\x42\x8e\x1b\xa9\x68\x12\x49\x7f\x86\x83\x8c\x02\x21\xab\x9c\x2d\x27\x08\x4a\x0f\x55\xb8\x7f\xbc\xfb\xed\xe7\x7f\x5d\x8b\xe7\xcf\x6f\x96\x23\x51\x93\x1b\xae\x0e\xa9\xfc\xf9\xa2\xe1\x93\x64\x8f\x20\x5c\x8a\x1e\xbd\x0f\x54\x7b\xdf\x30\x29\x6d\x64\x5b\x5f\x70\x28\x0e\xda\x9b\x61\x45\xd9\xa0\x0a\xa0\xfa\x31\x99\xc1\x3f\x3f\xbe\xfd\x78\xd9\x07\x31\xc0\x3d\x2c\x63\x2a\x54\x00\x96\xcb\x1d\x91\x9f\xb4\xc0\x3a\xa4\xd1\xbb\x5a\x0a\x2e\x9c\xdc\xd1\x76\xaa\x2a\xac\x29\x68\xb1\xde\x49\xa9\xb7\x24\xa1\xad\x6c\x36\x96\xb6\xfd\xca\x66\xb9\xae\x63\xb2\x61\x86\x20\x67\x0c\x72\x77\x99\xcc\xda\x44\x61\xc9\x2a\xc3\x76\x94\x0b\xfa\xd3\xd8\x58\xc0\xbb\x8c\x55\x69\x59\xd8\x7e\xd3\x65\x8b\xdf\x70\x72\xa7\x83\x36\x10\xca\xe9\x3d\x3e\xf7\x12\x03\xa1\x93\x0e\x9c\xac\xdb\xbd\x65\x16\x56\x62\x83\xea\xbc\x61\x47\xac\xc1\xa1\x0c\x13\xee\xb9\xf3\x4c\x76\xab\xe9\x5f\x50\x16\x32\xb1\xb5\x9a\x8b\x58\x8d\x1b\x4b\xfb\x04\xb0\x2e\x22\xf3\xef\xdb\x23\x5d\xbf\xbe\x79\x18\x67\x81\x96\xc1\xeb\xa2\xa1\x6e\x5c\x99\x4e\xb3\x77\x9c\x89\xf6\x2f\x1c\x97\x41\x4e\x93\x90\xda\x27\x26\xa6\x01\x48\x08\x34\x6d\x65\xdf\x63\xac\xdd\xb2\x1a\x16\x64\x73\x17\x03\xc5\x28\xdc\x74\x9a\x6c\xb4\xb8\x17\xb8\xec\x8e\x77\x71\xb1\xb8\xc8\x1e\x92\x23\x16\xb7\x88\xa0\x30\xf5\x91\x9d\xdf\x4b\x66\x3b\x9b\x1e\xb2\xf9\x7d\x2f\xfd\x61\x4c\x96\xa1\xf1\xcb\xa3\xfb\xc6\x4e\x18\xac\x5b\xce\x47\x1e\x18\xad\x9b\x3f\xea\x9c\x58\x2f\x1e\x23\x64\x3c\x24\xf3\xae\x0a\x18\xfb\x4b\x53\x0d\x60\xa4\x44\x94\xf0\x03\x1c\xbb\x61\xed\x05\x7c\xa0\xb2\x14\xc3\x2a\xd3\x06\x67\x79\x92\x4a\x61\xdd\xa2\x36\x7a\x23\x0a\x34\x36\x85\x54\xea\x95\x50\xf1\x7f\xed\x5d\x7a\x3a\xd8\x46\x39\x9d\xf6\xc4\x6b\x56\x7a\xda\x59\x75\x0d\x8b\xff\x8c\xa0\xb7\x67\x48\x9b\x67\xbd\x99\xb8\xb2\x4d\xe4\xbf\x47\xea\x29\x11\x21\xd8\x10\x58\xf0\x67\xd7\xac\xcf\x93\x3b\x22\xd8\x27\xdf\x0c\x26\x3c\xfc\x58\xee\x18\x47\x39\x0b\x6e\xfe\x16\xb1\x6e\x82\x06\x6d\xd4\xc2\x54\xba\x58\xd4\xcc\x5a\xba\x0a\x2c\x0f\x46\x16\xa5\x90\x38\x18\x36\x62\xc3\x1c\x2e\x6e\x71\x37\x1c\x8c\x88\xe9\x47\xa8\xfa\x12\xd7\x9b\x91\xa7\x02\xc7\x54\xe5\x9d\x35\x77\x1b\xeb\xeb\x5a\x1b\x17\xef\x1a\x5d\x59\x1a\xd4\xc9\x1d\xba\x47\x6e\xe9\x7f\x7a\x47\xff\x8a\xb0\xfc\x54\x34\xed\x01\x46\x58\x97\x75\x44\xfd\x86\xc8\x69\x81\x43\x41\xfe\xb7\xd5\xea\xc9\x78\xff\xff\x1b\xda\x83\x54\xa0\xbd\xfb\x1f\x44\xf4\x7b\x20\x9f\x2c\x90\x5c\x7a\xeb\xd0\x74\x6f\x7c\x4f\x18\x47\x38\x5e\xc0\x99\x73\x8c\x57\x29\xa4\x0d\x49\x29\x4f\xa4\x90\x1a\x5c\xeb\x0d\x86\x1f\x94\x95\x53\x48\x2d\x3a\x5f\x7f\xaf\xe7\xfb\xa2\xbf\xbc\x9e\x37\xb1\xcf\x62\x24\xbe\x06\x04\xbe\x53\xf9\xdb\x53\x39\x23\xbf\x76\xc1\xbc\x3c\x9c\x27\xa2\x1d\x9b\x8f\x0c\x3c\xbe\x82\xa8\x79\x6c\x45\xe0\xec\xe4\x02\xad\x4a\xb1\x9a\x9a\x79\xcc\xec\x5a\xfa\xf6\xc6\xd9\xcd\xc4\xa9\xbd\xca\xb3\x7c\xf9\xf5\xdf\x3a\xa8\xee\xa5\x90\x36\xc7\xa4\x5f\xe1\x3c\x7d\x16\x8b\xd6\x1e\xcb\x56\x74\x1d\xd9\xa0\xb1\xa2\xbf\x91\x74\x1d\x8a\xa2\x80\x28\xa0\x7f\x0d\x35\x28\x71\xc3\x94\x0b\x2f\xfa\xb1\x13\x26\x77\x10\x29\x8b\x05\x34\x96\xb4\x72\x94\x1e\xbe\xf0\xb6\x6f\xf6\x11\xe9\x08\x28\x42\x3f\x29\x18\x04\xda\x0c\x5b\x0e\x5f\xc8\xc2\x09\x06\xb6\x87\x9a\xe0\xe0\x80\x7a\x46\xac\x2a\x07\x4a\x6f\xf7\xf6\x86\x0e\x48\xa1\xd1\x82\x44\xb6\xc1\xd0\x2a\x0c\xed\x5e\xed\x50\x39\x41\x6e\xd5\x06\x0a\x74\xc8\x1d\xbd\x57\xc7\x33\x85\xee\x85\x63\xb7\x08\x1b\x26\x3d\x5a\xc8\xbd\x0b\xad\x17\x8b\x35\x33\xa1\x57\x21\xc5\x2d\xee\xe9\x5a\x2c\x82\x55\x61\x0b\x08\x65\x1d\xb2\x22\x7e\x94\xa1\xf1\x65\x18\xdf\xdb\xb2\xc5\x67\x06\x43\x57\x6f\xab\x8d\xd9\x85\x76\x7b\x4e\x36\xb6\x39\x66\x2f\xbd\x80\xab\x42\x0b\xdb\x6a\x10\xee\x99\x05\xcb\x4a\xa4\x88\x36\x5d\x7b\xb2\x7b\xa4\x61\x22\xfb\x0c\xb2\xc1\x41\xd6\xf9\xfc\x8c\x33\x90\x76\x10\x37\xa5\x0f\xfb\x43\x64\x39\x25\x8e\x10\x88\x5a\x5b\x2b\x72\x89\x07\x00\xfa\x04\x7b\x1e\xaf\x6f\x4f\x55\xdb\xfa\x0f\x3e\x8f\xf4\xb1\xe7\xaf\x47\xad\x6b\xee\x0d\xd4\x06\x37\xa1\xc1\x6c\x21\x7c\xd1\x19\xf5\x4d\x1a\x6e\x91\x1f\x46\xe3\x01\x90\x46\x6b\x47\xdb\x4b\x71\x17\x65\x0e\x1b\x2e\x69\xd0\xdb\x68\xeb\x1a\xa3\xcb\x93\x8e\xf7\xe3\x46\xdf\xf8\xf3\x58\xce\x6c\xb5\x18\xc0\xa8\x66\xfc\x96\xad\xb0\xe9\x41\x7f\x80\x1c\xa5\xc0\x0d\xc2\xda\x5b\xd7\x88\xcb\x23\x7e\x99\x94\x58\x74\x98\x97\xbb\xf8\xb9\x2c\x7c\x78\x0d\xde\x58\x61\x30\xb1\xce\xc2\x89\xb3\x7c\x97\x19\x2c\x61\xa1\x20\x5d\x5e\xa6\x93\xfe\x48\x26\xdc\xf8\xbb\x63\xc6\xc5\x6e\x6b\xdf\x4a\x57\x40\xb9\x21\x2a\x6c\xbf\x81\x9d\x51\xa4\xa3\x00\xda\x4f\x41\xea\x52\xd2\x42\x07\xbb\x9a\xfc\x4c\x7f\x0e\x7e\x2a\x1d\x1b\xe8\x8b\xf7\xa3\xcf\x78\x41\xc8\x7f\x03\x00\x00\xff\xff\x9c\x77\x3d\x64\x4e\x1e\x00\x00")

func completionShBytes() ([]byte, error) {
	return bindataRead(
		_completionSh,
		"completion.sh",
	)
}

func completionSh() (*asset, error) {
	bytes, err := completionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "completion.sh", size: 7758, mode: os.FileMode(420), modTime: time.Unix(1533890708, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"completion.sh": completionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"completion.sh": &bintree{completionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

