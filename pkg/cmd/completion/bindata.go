// Code generated by go-bindata.
// sources:
// completion.sh
// DO NOT EDIT!

package completion

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _completionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdd\x6f\xdb\x38\x12\x7f\x3e\xfd\x15\xb3\xb2\x81\x26\x69\x74\x69\x5f\x93\x73\xd1\xbd\x7e\x1c\x16\xd8\xdd\x2e\x6e\x6f\x1f\x0e\x41\x60\x50\xd4\xc8\xe2\x85\x26\x05\x7e\xd8\xf1\x05\xfe\xdf\x0f\x43\xea\xd3\x56\xb2\x0d\x36\xed\x3d\x6c\x05\x14\x75\x28\x72\x66\x38\xf3\xfb\xcd\x50\xc3\xd9\x77\x17\xb9\x50\x17\x39\xb3\x55\x92\xcc\x60\xb9\x2c\xb8\xb6\xcb\xbf\x55\x28\x6b\x34\x50\x7a\xc5\xdf\xd0\x70\x1c\xe5\x52\x80\xf5\x39\xd7\xeb\x35\x53\xc5\x9b\x24\x69\xa6\x17\x98\xfb\xd5\xc9\x29\xdc\x27\x00\x00\xa2\x84\xeb\x6b\xc8\x14\xcc\xef\xdf\xbf\xfb\xf4\xeb\xf2\xdd\xa7\x9f\x7e\x59\xbe\xff\xf0\xf7\xdf\xfe\xb1\xfc\xf8\xc3\x8f\x1f\xf6\x70\x73\x73\x05\xae\x42\x15\x66\xd3\x83\xbc\xd2\x90\xce\xef\x3f\xfe\xf6\xf3\xbb\x9f\xbf\xff\xe9\xc3\xf5\xeb\x9b\xfd\x25\xcc\xcf\x52\x78\xf3\x86\xc6\x27\xc5\xa4\x61\x79\x29\x92\x3d\x24\x64\x7a\x81\x25\xf3\xd2\x41\x8e\x15\xdb\x08\x6d\xc0\x69\x58\xa1\x23\x4d\xa0\xf0\xce\x41\x63\x36\x94\x46\xaf\xc3\x28\xf7\xc6\xa0\xea\x5e\xfc\x35\x99\x81\x50\xf1\x0d\xb3\x08\xba\x84\x2c\x23\x47\x00\xad\xd2\xae\x42\x03\xb5\x76\xa8\x9c\x60\x12\xb8\x30\xdc\xaf\xad\x63\x8a\xa3\x05\x57\x31\x07\xb6\xd2\x5e\x16\xc9\x0c\x50\x15\x24\xb4\x96\xe8\x84\x56\xe7\xe0\x2a\x61\xc1\xa0\xf3\x46\x59\x78\x7d\x1e\x65\x6d\x85\x45\x78\x95\xcc\x92\x19\x7c\x6f\xad\x5f\xa3\x05\x06\xf3\xd6\xc8\x0d\x33\x82\xe5\x12\x01\xef\x84\x75\xb6\x37\x4c\x4a\xa1\x56\xc0\xb5\x72\xb4\xa7\xa0\x77\x2b\xa4\x0c\x23\xac\x99\x55\x6a\xaf\x8a\x41\xa4\x0e\x54\x3c\x49\xb8\xb0\x43\x5f\x25\x33\xd8\x6a\x53\x40\x8e\x34\x11\x37\x4c\x7a\xe6\x70\xe0\x53\xa1\x6a\xef\xc0\x3a\x43\xef\x4f\xc2\xc6\x85\xa5\xd8\x08\x85\x05\x29\x6a\x20\xb3\x26\x5b\xad\x6e\x7c\xa6\x5e\x50\xdc\x60\xed\x79\x05\x0c\x6a\xa3\x73\x89\xeb\xd3\x1e\x5e\x21\xb2\xcb\x66\x37\xcb\x9a\x19\x8b\x1d\xdc\xb6\x95\x90\x08\xd7\x90\xce\x79\x0a\x99\x74\xf4\x83\x6c\x4c\xe1\xe6\x0a\x0a\xdd\x81\x4c\x2c\xd2\xf9\x3d\xbd\xb0\xd7\xfc\xa6\x41\x0f\x3d\x21\xd6\xe9\x5c\xa4\x20\x7a\x44\xd2\x13\x83\x7f\x3a\x1a\xa3\x67\x46\x08\x0f\xb8\x10\x16\x6a\x83\x96\x30\xc4\xc8\xb5\xa5\x64\xab\x73\xe0\x3a\x37\x2c\x06\x45\xac\x94\x36\x08\xb8\x41\xb3\x73\x15\xb9\x84\x95\x0e\x4d\xd8\xb8\xd3\xf5\x00\x24\x47\x5a\x22\x5c\xe0\xf5\xd1\x8b\xab\xab\xb1\x95\x67\xa7\x87\x43\x67\xc7\x36\x37\xae\x5b\xd0\x3e\xaf\x26\x76\x34\xe7\xb4\x19\x2c\x4b\xe4\x4e\x6c\x50\xee\x60\x25\x75\xce\x24\x59\x1a\x31\xc6\x76\x20\x1c\x70\xa6\x80\x1b\xb6\x95\xe0\x2a\xa3\xfd\xaa\x0a\x41\x67\x66\xe5\xd7\xa8\x9c\x25\x37\xd0\x40\x6d\xf4\xca\xb0\xf5\x84\x22\xc5\x36\x62\xc5\x1c\xc6\x79\x94\x5f\x68\xf7\xe0\x0c\x62\xa0\x99\xd5\x64\x4b\x70\x1e\x93\x5b\xb6\xb3\x84\x8b\x8e\xc2\x5e\x19\x64\x45\x80\xe0\x84\xec\xe8\xdb\x52\xa8\x82\x3c\x7d\xc8\xfb\x73\xd8\x12\x3c\xb9\x41\x32\x95\xb4\xe4\x58\x52\x74\x72\x83\xec\x96\x56\x68\xef\x88\xf4\xb4\x50\x6a\x5d\x1f\x69\x38\x39\xe1\x2f\x5f\x9e\x1e\x3b\x37\x08\x78\x2c\x4e\x68\x19\x4f\xa6\xa4\x14\x5a\x61\xf8\xd1\x44\xfb\x55\xb2\xef\x92\x6a\xc5\x54\x21\x91\x40\x5f\x1b\xac\xe5\xae\x03\xfc\x30\xe9\x42\xda\x43\xc8\x86\x94\x99\x84\x39\x52\x73\x26\x41\x2c\x5e\xc5\x3f\x4b\x6d\x06\x58\x23\x1a\xa6\xf3\xb7\xe9\x88\x1e\x33\x28\x85\x24\xff\x91\x17\x06\x42\x89\x5f\xbc\x22\x4b\x5f\x38\x58\x33\xc7\xab\x51\xee\x1c\x85\x22\x66\xfe\xf9\x40\xd3\x62\x41\x74\xf4\x26\x3d\x3b\xce\xfa\x51\x2b\xaf\x90\xdf\xd2\xca\x20\xb5\x5f\xa9\xcb\x12\x0d\xa5\x8c\x96\x58\x11\x87\x8c\x73\xac\x09\x68\xaa\x43\x5d\x63\xa1\xb0\xb0\x66\xe6\x16\x0b\xc8\x77\xf4\x7a\x71\xa0\x48\x94\x60\xf5\x39\x30\xb0\x35\xe3\x48\xd3\x95\xa6\x1d\x29\xcf\xa4\xdc\x01\x2b\x0a\x2c\xc0\x0a\xc5\x23\xde\xbc\x45\x13\x38\x71\x57\x23\xa7\x14\xe7\x34\xcd\x81\xd2\x9b\x50\x09\x42\xa2\x1b\xa9\x68\x12\x49\xbf\x87\xa3\x8c\x02\x21\xab\x9c\x2d\x26\x08\x4a\x0f\x55\xb8\x7f\x7e\xf8\xe5\xc7\x7f\x5f\x8b\x97\x2f\x6f\x16\x23\x51\x93\x0b\xae\x8e\xa9\xfc\x74\xd1\xf0\x59\xb2\x47\x10\x2e\x45\x8f\xde\x3d\xd5\xde\x77\x4c\x4a\x1b\xd9\xd6\x57\x1d\x8a\x83\xf6\x66\x58\x56\x36\x54\x3c\xb5\xb2\x54\x6a\xff\xf5\xe9\xfd\xa7\xcb\x3e\x88\x01\xee\x61\x1a\x53\xa1\x02\xb0\x5c\xee\x88\xfc\xa4\x05\xd6\x21\x8d\xde\xd5\x52\x70\xe1\xe4\x8e\x96\x53\x69\x61\x4d\x55\x8b\x45\x4f\x4a\xbd\x25\x09\x6d\x79\xb3\xb1\xbe\x1d\x96\x37\xcb\x75\x1d\x93\x0d\x33\x04\x39\x63\x90\xbb\xcb\x64\xd6\x26\x0a\x4b\x56\x19\xb6\xa3\x5c\xd0\xef\xc6\xc6\x2a\xde\x65\xac\x4a\xcb\xc2\xf6\x8b\x2e\x5b\xfc\x86\x9d\x3b\x1d\xb4\x81\x50\x4e\x1f\xf0\xb9\x97\x18\x08\x9d\x74\xe0\x64\xdd\xea\x2d\xb3\xb0\x12\x1b\x54\xe7\x0d\x3b\x62\x21\x0e\xb5\x98\x70\xcf\x9d\xa7\x03\x48\x33\x9b\xfe\x05\x65\x21\x13\x5b\xab\xb9\x88\x25\xb9\xb1\xb4\x4f\x00\xeb\x22\x32\xff\xbe\xdd\xd2\xf5\xdb\x9b\xfd\x38\x0b\xb4\x0c\x5e\x17\x0d\x75\xe3\xcc\x74\x9a\xbd\xe3\x4c\x74\x78\xea\xb8\x0c\x72\x9a\x84\xd4\x3e\x31\x31\x0d\x40\x42\xa0\x69\x2b\xfb\x01\x63\xed\x96\xd5\x90\x91\xcd\x5d\x0c\x14\xa3\x70\xd3\x6e\x96\xa3\xc9\xbd\xc0\x45\xb7\xbd\x8b\x8b\xec\x62\xb9\x4f\x1e\xb1\xb8\x45\x04\x85\xa9\x8f\xec\xfc\x5e\x32\xdb\xd9\xb4\x5f\xce\xef\x7b\xe9\xfb\x31\x59\x86\xc6\x2f\x1e\x5d\x37\x76\xc2\x60\xde\x62\x3e\xf2\xc0\x68\xde\xfc\x41\xe7\xc4\x7a\xf1\x10\x21\xe3\x26\x99\x77\x55\xc0\xd8\x5f\x9a\x6a\x00\x23\x25\xa2\x84\xef\xe0\xb1\x13\xd6\x41\xc0\x07\x2a\x4b\x31\xac\x32\x6d\x70\x16\x27\xa9\x14\xd6\x65\xb5\xd1\x1b\x51\xa0\xb1\x29\xa4\x52\xaf\x84\x8a\xff\x6b\xef\xd2\xd3\xc1\x32\xca\xe9\xb4\x26\x1e\xb3\xd2\xd3\xce\xaa\x6b\xc8\xfe\x3b\x82\xde\x81\x21\x6d\x9e\xf5\x66\xe2\xc8\x36\x91\xff\x1e\xa8\xa7\x44\x84\x60\x43\x60\xc1\xef\x1d\xb3\x9e\x26\x77\x44\xb0\xcf\x3e\x19\x4c\x78\xf8\xa1\xdc\x31\x8e\xf2\x32\xb8\xf9\x6b\xc4\xba\x09\x1a\xb4\x51\x0b\xaf\xd2\x2c\xab\x99\xb5\x74\x14\x58\x1c\x8d\x64\xa5\x90\x38\x18\x36\x62\xc3\x1c\x66\xb7\xb8\x1b\x0e\x46\xc4\xf4\x23\x54\x7d\x89\xeb\xcd\xc8\x73\x81\x63\xaa\xf2\xce\x9a\xb3\x8d\xf5\x75\xad\x8d\x8b\x67\x8d\xae\x2c\x0d\xea\xe4\x0e\xdd\x03\xa7\xf4\xdf\x3d\xa3\x7f\x41\x58\x7e\x2e\x9a\x0e\x00\x23\xac\x5b\x76\x44\xfd\x8a\xc8\x69\x81\x43\x41\xfe\x8f\xd5\xea\xd9\x78\xff\xe7\x0d\xed\x51\x2a\xd0\xde\xfd\x1f\x22\xfa\x2d\x90\xcf\x16\x48\x2e\xbd\x75\x68\xba\x2f\xbe\x67\x8c\x23\x3c\x5e\xc0\x99\x73\x8c\x57\x29\xa4\x0d\x49\x29\x4f\xa4\x90\x1a\x5c\xeb\x0d\x86\x1f\x94\x95\x53\x48\x2d\x3a\x5f\x7f\xab\xe7\x87\xa2\xff\x78\x3d\x6f\x62\xbf\x8c\x91\xf8\x12\x10\xf8\x46\xe5\xaf\x49\x65\xad\x4a\xd1\xf7\xc6\x2f\xfb\x37\xe4\xe9\xa9\xf1\x5a\xfa\xf6\x30\xd7\xbd\x89\xaf\x0e\x92\xfa\xe2\xf5\x97\x3f\xd0\x53\x49\x49\x21\x6d\x40\x49\xbf\xc2\x7e\xfa\x04\x11\xad\x7d\x2c\x11\x50\xa5\xdf\xa0\xb1\xa2\x2f\xf6\xdd\xc7\x7f\x51\x40\x14\xd0\x7f\xe1\x19\x94\xb8\x61\xca\x85\x6f\xe8\xd8\x64\x92\x3b\x88\x6c\xc0\x02\x1a\x4b\x5a\x39\x4a\x0f\xbf\x25\xdb\x8f\xe6\x08\x22\x04\x14\xa1\x55\x13\x0c\x02\x6d\x86\x5f\xf3\x7f\x10\xe0\x13\xe0\x6e\x37\x35\x01\xef\x01\xaa\x8d\x58\x55\x0e\x94\xde\x1e\xac\x0d\xcd\x85\x42\xa3\x05\x89\x6c\x83\xa1\x0b\x17\x3a\xa9\xdd\x85\x03\x7d\xf4\x16\xe8\x90\x3b\xfa\x64\x8d\x7b\x0a\x8d\x01\xc7\x6e\x11\x36\x4c\x7a\xb4\x90\x7b\x17\xba\x1a\x16\x6b\x66\x42\x1b\x40\x8a\x5b\x3c\xd0\x95\x65\xc1\xaa\xb0\x04\x84\xb2\x0e\x59\x11\x6f\x3b\x68\x7c\x11\xc6\x0f\x96\x6c\xf1\x85\xc1\xd0\x30\xdb\x6a\x63\x76\xa1\x93\x9d\x93\x8d\x2d\x7d\x0f\x98\x0b\xae\x0a\xdd\x61\xab\x41\xb8\x17\x16\x2c\x2b\x91\x22\xda\x34\xc4\xc9\xee\x91\x86\x09\x62\x0f\x88\x76\x44\xe8\xa7\x93\x79\x20\xed\x28\x6e\x4a\x1f\xb7\x5e\xc8\x72\x2a\x7e\x21\x10\xb5\xb6\x56\xe4\x12\x8f\x00\xf4\x19\xf6\x3c\x5c\x3a\x9e\xab\x6c\xf4\x17\x2a\x0f\xb4\x88\xe7\x6f\x47\x5d\x61\xee\x0d\xd4\x06\x37\xa1\x77\x6b\x21\x5c\x96\x8c\x5a\x12\x0d\xb7\xc8\x0f\xa3\xf1\x00\x48\xa3\xb5\xa3\xe5\xa5\xb8\x8b\x32\x87\xbd\x8c\x34\xe8\x6d\xb4\x75\x3d\xc7\xc5\x49\xc7\xfb\x71\x0f\x6d\x7c\xfd\x94\x33\x5b\x65\x03\x18\xd5\x8c\xdf\xb2\x15\x36\xed\xdd\x1f\x20\x47\x29\x70\x83\xb0\xf6\xd6\x35\xe2\xf2\x88\x5f\x26\x25\x16\x1d\xe6\xe5\x2e\x5e\x47\x85\x3b\xcd\xe0\x8d\x15\x06\x13\xeb\x65\xd8\xf1\x32\xdf\x2d\x0d\x96\x90\x29\x48\x17\x97\xe9\xa4\x3f\x92\x09\x37\xfe\xea\x98\x71\xb1\x91\xd9\x77\xa9\x15\x50\x6e\x88\x0a\xdb\xeb\xa5\x33\x8a\x74\x14\x40\xeb\x29\x48\x5d\x4a\xca\x74\xb0\xab\xbd\xac\xcc\x34\x0c\x7e\x2a\x1d\x7b\xd3\xd9\xc7\xd1\x35\x59\x10\xf2\xbf\x00\x00\x00\xff\xff\x83\xf6\x53\xb4\xa9\x1d\x00\x00")

func completionShBytes() ([]byte, error) {
	return bindataRead(
		_completionSh,
		"completion.sh",
	)
}

func completionSh() (*asset, error) {
	bytes, err := completionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "completion.sh", size: 7593, mode: os.FileMode(420), modTime: time.Unix(1533731929, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"completion.sh": completionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"completion.sh": &bintree{completionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

